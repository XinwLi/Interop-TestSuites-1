<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns1:ReqTable xmlns:ns1="http://schemas.microsoft.com/windows/ProtocolsTest/2007/07/RequirementTable">
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R2</ns1:REQ_ID>
		<ns1:Doc_Sect>2.1</ns1:Doc_Sect>
		<ns1:Description>[In Transport] This protocol [MS-OXCRPC] works over the following RPC protocol sequences:&lt;1&gt; [ncacn_ip_tcp, ncacn_http].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1889, MS-OXCRPC_R1936.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4</ns1:REQ_ID>
		<ns1:Doc_Sect>2.1</ns1:Doc_Sect>
		<ns1:Description>[In Transport] For the network protocol sequence ncacn_http, this protocol MUST use the well-known endpoint 6001.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R9</ns1:REQ_ID>
		<ns1:Doc_Sect>2.1</ns1:Doc_Sect>
		<ns1:Description>[In Transport] For ncacn_ip_tcp, this protocol MUST use RPC dynamic endpoints, as defined in Part 4 of [C706].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R10</ns1:REQ_ID>
		<ns1:Doc_Sect>2.1</ns1:Doc_Sect>
		<ns1:Description>[In Transport] This protocol MUST use the UUID specified in section 1.9.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R12</ns1:REQ_ID>
		<ns1:Doc_Sect>2.1</ns1:Doc_Sect>
		<ns1:Description>[In Transport] This protocol allows any user to establish an authenticated connection to the RPC server by using an authentication method as specified in [MS-RPCE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R14</ns1:REQ_ID>
		<ns1:Doc_Sect>2.1</ns1:Doc_Sect>
		<ns1:Description>[In Transport] The protocol [MS-OXCRPC] uses the underlying RPC protocol to retrieve the identity of the caller that made the method call, as specified in [MS-RPCE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R15</ns1:REQ_ID>
		<ns1:Doc_Sect>2.1</ns1:Doc_Sect>
		<ns1:Description>[In Transport] The server uses this identity [retrieved by the protocol using the underlying RPC protocol] to perform method-specific access checks.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1473</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2</ns1:Doc_Sect>
		<ns1:Description>[In Common Data Types] This protocol uses the RPC base types and definitions specified in [C706] and [MS-RPCE], plus additional data types and structures that are defined in section [CXH, ACXH, BIG_RANGE_ULONG, SMALL_RANGE_ULONG, RPC_HEADER_EXT, AUX_HEADER, AUX_PERF_REQUESTID, AUX_PERF_SESSIONINFO, AUX_PERF_SESSIONINFO_V2, AUX_PERF_CLIENTINFO, AUX_PERF_SERVERINFO, AUX_PERF_PROCESSINFO, AUX_PERF_DEFMDB_SUCCESS, AUX_PERF_DEFGC_SUCCESS, AUX_PERF_MDB_SUCCESS, AUX_PERF_MDB_SUCCESS_V2, AUX_PERF_GC_SUCCESS, AUX_PERF_GC_SUCCESS_V2, AUX_PERF_FAILURE, AUX_PERF_FAILURE_V2, AUX_CLIENT_CONTROL, AUX_OSVERSIONINFO, AUX_EXORGINFO, AUX_PERF_ACCOUNTINFO, AUX_ENDPOINT_CAPABILITIES,  AUX_CLIENT_CONNECTION_INFO, AUX_SERVER_SESSION_INFO and AUX_PROTOCOL_DEVICE_IDENTIFICATION] 2.2.1.1 through section 2.2.2.2.22.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1474</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2</ns1:Doc_Sect>
		<ns1:Description>[In Common Data Types] The following table lists the types and structures [CXH, ACXH, BIG_RANGE_ULONG, SMALL_RANGE_ULONG, RPC_HEADER_EXT,AUX_HEADER, AUX_PERF_REQUESTID, AUX_PERF_SESSIONINFO, AUX_PERF_SESSIONINFO_V2, AUX_PERF_CLIENTINFO, AUX_PERF_SERVERINFO, AUX_PERF_PROCESSINFO, AUX_PERF_DEFMDB_SUCCESS, AUX_PERF_DEFGC_SUCCESS, AUX_PERF_MDB_SUCCESS, AUX_PERF_MDB_SUCCESS_V2, AUX_PERF_GC_SUCCESS, AUX_PERF_GC_SUCCESS_V2, AUX_PERF_FAILURE, AUX_PERF_FAILURE_V2, AUX_CLIENT_CONTROL, AUX_OSVERSIONINFO, AUX_EXORGINFO, AUX_PERF_ACCOUNTINFO, AUX_ENDPOINT_CAPABILITIES, AUX_CLIENT_CONNECTION_INFO, AUX_SERVER_SESSION_INFO and AUX_PROTOCOL_DEVICE_IDENTIFICATION] that are defined in this specification [MS-OXCRPC].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1475</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2</ns1:Doc_Sect>
		<ns1:Description>[In Common Data Types] Any structure that is not defined in this specification [MS-OXCRPC] is reserved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1476</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2</ns1:Doc_Sect>
		<ns1:Description>[In Common Data Types] Any structure that is not defined in this specification [MS-OXCRPC] MUST be ignored by the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R17</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Simple Data Types] The Interface Definition Language (IDL) for this protocol, as given in section 6, identifies four Simple Data Types [CXH, ACXH, BIG_RANGE_ULONG and SMALL_RANGE_ULONG], which are defined in section 2.2.1.1 through section 2.2.1.4.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R18</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In CXH Data Type] The CXH data type is a session context handle to be used with an EMSMDB interface, as specified in section 3.1 and section 3.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R406, MS-OXCRPC_R427, MS-OXCRPC_R483, MS-OXCRPC_R625.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R19</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.1.2</ns1:Doc_Sect>
		<ns1:Description>[In ACXH Data Type] The AXCH data type is an asynchronous context handle to be used with an AsyncEMSMDB interface, as specified in section 3.3 and section 3.4.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R20</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.1.3</ns1:Doc_Sect>
		<ns1:Description>[In BIG_RANGE_ULONG Data Type] The BIG_RANGE_ULONG data type is an unsigned long that MUST be between 0x0 and 0x40000.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R21</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In SMALL_RANGE_ULONG Data Type] The SMALL_RANGE_ULONG data type is an unsigned long that MUST be between 0x0 and 0x1008.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Structures] Unless otherwise specified, buffers and fields in section 2.2.2.1 through section 2.2.2.2.22 are depicted in little-endian byte order.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4793</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] The RPC_HEADER_EXT structure provides information about the payload that follows.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R32</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] Version (2 bytes): The version of the structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R33.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R33</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] [Version (2 bytes)] This value MUST be set to 0x0000.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R34</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] Flags (2 bytes): The flags that specify how data that follows this header [RPC_HEADER_EXT] MUST be interpreted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R35</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] [Flags (2 bytes)] The flags [Compressed, XorMagic, Last] in the following table are valid.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R36</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] [Flags (2 bytes)] [Compressed 0x0001] The data that follows the RPC_HEADER_EXT structure is compressed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R37</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] [Flags (2 bytes)] [Compressed 0x0001] The size of the data when uncompressed is in the SizeActual field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R38</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] [Flags (2 bytes)] [Compressed 0x0001] If this flag is not set, the Size and SizeActual fields MUST be the same.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4794</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] [Flags (2 bytes)] [Compressed 0x0001] If this flag is set, the value of the Size field MUST be less than the value of the SizeActual field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R39</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] [Flags (2 bytes)] [XorMagic 0x0002] The data following the RPC_HEADER_EXT structure has been obfuscated.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1767</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] [Flags (2 bytes)] [XorMagic 0x0002] For more details about the obfuscation algorithm, see section 3.1.4.1.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R40</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] [Flags (2 bytes)] [Last 0x0004] No other RPC_HEADER_EXT structure follows the data of the current RPC_HEADER_EXT structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R41</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] [Flags (2 bytes)] [Last 0x0004] This flag indicates that there are multiple buffers, each with its own RPC_HEADER_EXT, one after the other.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R775, MS-OXCRPC_R778, MS-OXCRPC_R779.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R42</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] Size (2 bytes): The total length of the payload data that follows the RPC_HEADER_EXT structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R46.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R43</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] [Size (2 bytes)] This length does not include the length of the RPC_HEADER_EXT structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R46.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R44</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] SizeActual (2 bytes): The length of the payload data after it has been uncompressed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R46.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R45</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] [SizeActual (2 bytes)] This field is only useful if the Compressed flag is set in the Flags field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R46</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In RPC_HEADER_EXT Structure] [SizeActual (2 bytes)] If the Compressed flag is not set, this value [SizeActual] MUST be equal to the value of the Size field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4795</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] The AUX_HEADER structure provides information about the auxiliary block structures that follow it.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R47</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] Size (2 bytes): The size of the AUX_HEADER structure plus any additional payload data that follows.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R993.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R48</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] Version (1 byte): The version information of the payload data that follows the AUX_HEADER structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R1061, MS-OXCRPC_R1073, MS-OXCRPC_R990.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R49</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Version (1 byte)] This value in conjunction with the Type field determines which structure to use to interpret the data that follows the header.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R55.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R50</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Version (1 byte)] The value of version "AUX_VERSION_1" is "0x01".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R1061, MS-OXCRPC_R1073, MS-OXCRPC_R990.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R51</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Version (1 byte)] The value of version "AUX_VERSION_2" is "0x02".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R1061, MS-OXCRPC_R1073, MS-OXCRPC_R990.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R52</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] Type (1 byte): The type of auxiliary block data structure that follows the AUX_HEADER structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R1061, MS-OXCRPC_R1073, MS-OXCRPC_R990.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R53</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] The value of the Type field in conjunction with the Version field determines which auxiliary block structure to use to interpret the data that follows the AUX_HEADER structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R1061, MS-OXCRPC_R1073, MS-OXCRPC_R990.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R54</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] Several of the types distinguish among the client's foreground request (FG), the client's background request (BG), and the client's global catalog request (GC).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4796</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] A foreground request is a request where the client is waiting for a response from the server before continuing</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4797</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] A background request is a request where the client is operating in cached mode versus online.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4798</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] A global catalog request is a client request sent to the mailbox directory.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R55</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] The block type names, associated Type field values, and the corresponding auxiliary block structure that follows the AUX_HEADER structure when the Version field is AUX_VERSION_1 are listed in the following table [The types are: AUX_TYPE_PERF_REQUESTID 0x01, AUX_TYPE_PERF_CLIENTDINFO 0x02, AUX_TYPE_PERF_SERVERINFO 0x03, AUX_TYPE_PERF_SESSIONINFO 0x04, AUX_TYPE_PERF_DEFMDB_SUCCESS 0x05, AUX_TYPE_PERF_DEFGC_SUCCESS 0x06, AUX_TYPE_PERF_MDB_SUCCESS 0x07, AUX_TYPE_PERF_GC_SUCCESS 0x08, AUX_TYPE_PERF_FAILURE 0x09, AUX_TYPE_CLIENT_CONTROL 0x0A, AUX_TYPE_PERF_PROCESSINFO 0x0B, AUX_TYPE_PERF_BG_DEFMDB_SUCCESS 0x0C, AUX_TYPE_PERF_BG_DEFGC_SUCCESS 0x0D, AUX_TYPE_PERF_BG_MDB_SUCCESS 0x0E, AUX_TYPE_PERF_BG_GC_SUCCESS 0x0F, AUX_TYPE_PERF_BG_FAILURE 0x10, AUX_TYPE_PERF_FG_DEFMDB_SUCCESS 0x11, AUX_TYPE_PERF_FG_DEFGC_SUCCESS 0x12, AUX_TYPE_PERF_FG_MDB_SUCCESS 0x13, AUX_TYPE_PERF_FG_GC_SUCCESS 0x14, AUX_TYPE_PERF_FG_FAILURE 0x15, AUX_TYPE_OSVERSIONINFO 0x16, AUX_TYPE_EXORGINO 0x17, AUX_TYPE_PERF_ACCOUNTINFO 0x18, AUX_TYPE_SERVER_CAPABILITIES 0x46, AUX_TYPE_ENDPOINT_CAPABILITIES 0x48, AUX_CLIENT_CONNECTION_INFO 0x4A, AUX_SERVER_SESSION_INFO 0X4B, AUX_PROTOCOL_DEVICE_IDENTIFICATION 0X4E].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R56</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_REQUESTID 0x01", means "AUX_PERF_REQUESTID" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R57</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_CLIENTDINFO 0x02", means "AUX_PERF_CLIENTINFO" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R58</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_SERVERINFO 0x03", means "AUX_PERF_SERVERINFO" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R59</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_SESSIONINFO0x04", means "AUX_PERF_SESSIONINFO" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R60</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_DEFMDB_SUCCESS 0x05", means "AUX_PERF_DEFMDB_SUCCESS" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R61</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_DEFGC_SUCCESS 0x06", means "AUX_PERF_DEFGC_SUCCESS" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R62</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_MDB_SUCCESS 0x07", means "AUX_PERF_MDB_SUCCESS" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R63</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_GC_SUCCESS 0x08", means "AUX_PERF_GC_SUCCESS" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R64</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_FAILURE 0x09", means "AUX_PERF_FAILURE" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R65</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_CLIENT_CONTROL 0x0A", means "AUX_CLIENT_CONTROL" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R66</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_PROCESSINFO 0x0B", means "AUX_PERF_PROCESSINFO" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R67</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_BG_DEFMDB_SUCCESS 0x0C", means "AUX_PERF_DEFMDB_SUCCESS" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R68</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_BG_DEFGC_SUCCESS 0x0D", means "AUX_PERF_DEFGC_SUCCESS" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R69</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_BG_MDB_SUCCESS 0x0E", means "AUX_PERF_MDB_SUCCESS" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R70</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_BG_GC_SUCCESS 0x0F", means "AUX_PERF_GC_SUCCESS" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R71</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_BG_FAILURE 0x10", means "AUX_PERF_FAILURE" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R72</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_FG_DEFMDB_SUCCESS 0x11", means "AUX_PERF_DEFMDB_SUCCESS" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R73</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_FG_DEFGC_SUCCESS 0x12", means "AUX_PERF_DEFGC_SUCCESS" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R74</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_FG_MDB_SUCCESS 0x13", means "AUX_PERF_MDB_SUCCESS" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R75</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_FG_GC_SUCCESS 0x14", means "AUX_PERF_GC_SUCCESS" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R76</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_FG_FAILURE 0x15", means "AUX_PERF_FAILURE" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R77</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_OSVERSIONINFO 0x16", means "AUX_OSVERSIONINFO" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R272, MS-OXCRPC_R273, MS-OXCRPC_R274, MS-OXCRPC_R275, MS-OXCRPC_R278, MS-OXCRPC_R279.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R78</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_EXORGINO 0x17", means "AUX_EXORGINFO" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R283.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1350</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_PERF_ACCOUNTINFO0x18", means "AUX_PERF_ACCOUNTINFO" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1350001</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_SERVER_CAPABILITIES0x46", means "AUX_TYPE_SERVER_CAPABILITIES" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requrements: MS-OXCRPC_R291004, MS-OXCRPC_R291007, MS-OXCRPC_R291009.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1518</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_TYPE_ENDPOINT_CAPABILITIES0x48", means "AUX_ENDPOINT_CAPABILITIES" structure will follow the AUX_HEADER.&lt;2&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1739, MS-OXCRPC_R1839.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1519</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_CLIENT_CONNECTION_INFO0x4A", means "AUX_CLIENT_CONNECTION_INFO" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1520</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_SERVER_SESSION_INFO0x4B", means "AUX_SERVER_SESSION_INFO" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R1535, MS-OXCRPC_R1539, MS-OXCRPC_R1540.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1851</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_1 and the type value is "AUX_PROTOCOL_DEVICE_IDENTIFICATION 0x4E", means "AUX_PROTOCOL_DEVICE_IDENTIFICATION " structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R79</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] The block type names, associated Type field values, and the corresponding auxiliary block structure that follows the AUX_HEADER when the Version field is AUX_VERSION_2 are listed in the following table. [The types are: AUX_TYPE_PERF_SESSIONINFO 0x04, AUX_TYPE_PERF_MDB_SUCCESS 0x07, AUX_TYPE_PERF_GC_SUCCESS 0x08, AUX_TYPE_PERF_FAILURE 0x09, AUX_TYPE_PERF_PROCESSINFO 0x0B, AUX_TYPE_PERF_BG_MDB_SUCCESS 0x0E, AUX_TYPE_PERF_BG_GC_SUCCESS 0x0F, AUX_TYPE_PERF_BG_FAILURE 0x10, AUX_TYPE_PERF_FG_MDB_SUCCESS 0x13, AUX_TYPE_PERF_FG_GC_SUCCESS 0x14, AUX_TYPE_PERF_FG_FAILURE 0x15].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R80</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_2 and the type value is "AUX_TYPE_PERF_SESSIONINFO 0x04", means "AUX_PERF_SESSIONINFO_V2" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R81</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_2 and the type value is "AUX_TYPE_PERF_MDB_SUCCESS 0x07", means "AUX_PERF_MDB_SUCCESS_V2" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R82</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_2 and the type value is "AUX_TYPE_PERF_GC_SUCCESS 0x08", means "AUX_PERF_GC_SUCCESS_V2" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R83</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_2 and the type value is "AUX_TYPE_PERF_FAILURE 0x09", means "AUX_PERF_FAILURE_V2" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R84</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_2 and the type value is "AUX_TYPE_PERF_PROCESSINFO 0x0B", means "AUX_PERF_PROCESSINFO" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R85</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_2 and the type value is "AUX_TYPE_PERF_BG_MDB_SUCCESS 0x0E", means "AUX_PERF_MDB_SUCCESS_V2" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R86</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_2 and the type value is "AUX_TYPE_PERF_BG_GC_SUCCESS 0x0F", means "AUX_PERF_GC_SUCCESS_V2" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R87</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_2 and the type value is "AUX_TYPE_PERF_BG_FAILURE 0x10", means "AUX_PERF_FAILURE_V2" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R88</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_2 and the type value is "AUX_TYPE_PERF_FG_MDB_SUCCESS 0x13", means "AUX_PERF_MDB_SUCCESS_V2" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R89</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_2 and the type value is "AUX_TYPE_PERF_FG_GC_SUCCESS 0x14", means "AUX_PERF_GC_SUCCESS_V2" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R90</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] [Type (1 byte)] When the Version field is AUX_VERSION_2 and the type value is "AUX_TYPE_PERF_FG_FAILURE 0x15", means "AUX_PERF_FAILURE_V2" structure will follow the AUX_HEADER.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4799</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_HEADER Structure] The auxiliary block structures are specified in section 2.2.2.2.1 through section 2.2.2.2.22.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4800</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_REQUESTID Auxiliary Block Structure] The AUX_PERF_REQUESTID auxiliary block structure identifies the request associated with the session.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R94</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_REQUESTID Auxiliary Block Structure] SessionID (2 bytes): The session identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R95</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_REQUESTID Auxiliary Block Structure] RequestID (2 bytes): The RPC request identification.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4801</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SESSIONINFO Auxiliary Block Structure] The AUX_PERF_SESSIONINFO auxiliary block structure identifies the client session to associate performance data with.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R96</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SESSIONINFO Auxiliary Block Structure] SessionID (2 bytes): The session identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R97</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SESSIONINFO Auxiliary Block Structure] Reserved (2 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R101</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SESSIONINFO Auxiliary Block Structure] SessionGuid (16 bytes): The GUID representing the client session to associate with the session identification number in the SessionID field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4802</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.3</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SESSIONINFO_V2] The AUX_PERF_SESSIONINFO_V2 auxiliary block structure provides diagnostic information about the client session to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R102</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.3</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SESSIONINFO_V2 Auxiliary Block Structure] SessionID (2 bytes): The session identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R103</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.3</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SESSIONINFO_V2 Auxiliary Block Structure] Reserved (2 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R107</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.3</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SESSIONINFO_V2 Auxiliary Block Structure] SessionGuid (16 bytes): The GUID representing the client session to associate with the session identification number in the SessionID field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R108</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.3</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SESSIONINFO_V2 Auxiliary Block Structure] ConnectionID (4 bytes): The connection identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4803</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] The AUX_PERF_CLIENTINFO auxiliary block structure identifies which client to associate performance data with.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R109</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] AdapterSpeed (4 bytes): The speed of client computer's network adapter, in kilobits per second.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R110</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] ClientID (2 bytes): The client-assigned client identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R111</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] MachineNameOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure to the MachineName field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1351</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [MachineNameOffset (2 bytes)] A value of zero indicates that the MachineName field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R112</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] UserNameOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure to the UserName field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1352</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [UserNameOffset (2 bytes)] A value of zero indicates that the UserName field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R113</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] ClientIPSize (2 bytes): The size of the client IP address referenced by the ClientIPOffset field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R114</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [ClientIPSize (2 bytes)] The client IP address is located in the ClientIP field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R115</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] ClientIPOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure to the ClientIP field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1353</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [ClientIPOffset (2 bytes)] A value of zero indicates that the ClientIP field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R116</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] ClientIPMaskSize (2 bytes): The size of the client IP subnet mask referenced by the ClientIPMaskOffset field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R117</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [ClientIPMaskSize (2 bytes)] The client IP mask is located in the ClientIPMask field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R118</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] ClientIPMaskOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure to the ClientIPMask field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R119</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [ClientIPMaskOffset (2 bytes)] The size of the IP subnet mask is found in the ClientIPMaskSize field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1354</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [ClientIPMaskOffset (2 bytes)] A value of zero indicates that the ClientIPMask field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R120</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] AdapterNameOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure to the AdapterName field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1355</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [AdapterNameOffset (2 bytes)] A value of zero indicates that the AdapterName field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R121</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] MacAddressSize (2 bytes): The size of the network adapter Media Access Control (MAC)address referenced by the MacAddressOffset field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R122</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [MacAddressSize (2 bytes)] The network adapter MAC address is located in the MacAddress field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R123</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] MacAddressOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure to the MacAddress field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1356</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [MacAddressOffset (2 bytes)] A value of zero indicates that the MacAddress field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R125</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] ClientMode (2 bytes): A flag that shows the mode in which the client is running.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R126</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [ClientMode (2 bytes)] The valid values are specified in the following table.[CLIENTMODE_UNKNOWN 0x00, CLIENTMODE_CLASSIC 0x01, CLIENTMODE_CACHED 0x02].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R127</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [ClientMode (2 bytes)] Mode CLIENTMODE_UNKNOWN 0x00 means client is not designating a mode of operation.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R128</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [ClientMode (2 bytes)] Mode CLIENTMODE_CLASSIC 0x01 means client is running in classic online mode.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R129</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [ClientMode (2 bytes)] Mode CLIENTMODE_CACHED 0x02 means client is running in cached mode.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R130</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] Reserved (2 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R133</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] MachineName (variable): A null-terminated Unicode string that contains the client computer name.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R134</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [MachineName (variable)] This variable field is offset from the beginning of the AUX_HEADER structure by the MachineNameOffset field value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R135</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] UserName (variable): A null-terminated Unicode string that contains the user's account name.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R136</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [UserName (variable)] This variable field is offset from the beginning of the AUX_HEADER structure by the UserNameOffset field value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R137</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] ClientIP (variable): The client's IP address.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R138</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [ClientIP (variable)] This field is offset from the beginning of the AUX_HEADER structure by the ClientIPOffset field value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R139</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [ClientIP (variable)] The size of the client IP address data is found in the ClientIPSize field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R140</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] ClientIPMask (variable): The client's IP subnet mask.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R141</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [ClientIPMask (variable)] This field is offset from the beginning of the AUX_HEADER structure by the ClientIPMaskOffset field value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R142</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [ClientIPMask (variable)] The size of the client IP mask data is found in the ClientIPMaskSize field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R143</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] AdapterName (variable): A null-terminated Unicode string that contains the client network adapter name.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R144</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [AdapterName (variable)] This field is offset from the beginning of the AUX_HEADER structure by the AdapterNameOffset field value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R145</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] MacAddress (variable): The client's network adapter MAC address.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R146</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [MacAddress (variable)] This field is offset from the beginning of the AUX_HEADER structure by the MacAddressOffset field value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R147</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_CLIENTINFO Auxiliary Block Structure] [MacAddress (variable)] The size of the network adapter MAC address data is found in the MacAddressSize field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4804</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] The AUX_PERF_SERVERINFO auxiliary block structure identifies which server a client is communicating with to associate the performance data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R148</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] ServerID (2 bytes): The client assigned server identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R149</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] ServerType (2 bytes): The server type assigned by client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R150</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] [ServerType (2 bytes)] The following table specifies valid values [SERVERTYPE_UNKNOWN 0x00, SERVERTYPE_PRIVATE 0x01, SERVERTYPE_PUBLIC 0x02, SERVERTYPE_DIRECTORY 0x03, SERVERTYPE_REFERRAL 0x04].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R151</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] [ServerType (2 bytes)] Type SERVERTYPE_UNKNOWN 0x00 means unknown server type.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R152</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] [ServerType (2 bytes)] Type SERVERTYPE_PRIVATE 0x01 means client/server connection servicing private mailbox data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R153</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] [ServerType (2 bytes)] Type SERVERTYPE_PUBLIC 0x02 means client/server connection servicing public folder data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R154</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] [ServerType (2 bytes)] Type SERVERTYPE_DIRECTORY 0x03 means client/server connection servicing directory data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R155</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] [ServerType (2 bytes)] Type SERVERTYPE_REFERRAL 0x04 means client/server connection servicing referrals.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R156</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] ServerDNOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure to the ServerDN field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1357</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] [ServerDNOffset (2 bytes)] A value of zero indicates that the ServerDN field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R157</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] ServerNameOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure to the ServerName field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1358</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] [ServerNameOffset (2 bytes)] A value of zero indicates that the ServerName field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R158</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] ServerDN (variable): A null-terminated Unicode string that contains the DN of the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R159</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] [ServerDN (variable)] This field is offset from the beginning of the AUX_HEADER structure by the ServerDNOffset field value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R160</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] ServerName (variable): A null-terminated Unicode string that contains the server name.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R161</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.5</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_SERVERINFO Auxiliary Block Structure] [ServerName (variable)] This field is offset from the beginning of the AUX_HEADER structure by the ServerNameOffset field value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4805</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.6</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_PROCESSINFO Auxiliary Block Structure] The AUX_PERF_PROCESSINFO auxiliary block structure identifies the client process to associate performance data with.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R162</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.6</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_PROCESSINFO Auxiliary Block Structure] ProcessID (2 bytes): The client-assigned process identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R163</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.6</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_PROCESSINFO Auxiliary Block Structure] Reserved_1 (2 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R166</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.6</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_PROCESSINFO Auxiliary Block Structure] ProcessGuid (16 bytes): The GUID representing the client process to associate with the process identification number in the ProcessID field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R167</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.6</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_PROCESSINFO Auxiliary Block Structure] ProcessNameOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure to the ProcessName field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1359</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.6</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_PROCESSINFO Auxiliary Block Structure] [ProcessNameOffset (2 bytes)] A value of zero indicates that the ProcessName field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R168</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.6</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_PROCESSINFO Auxiliary Block Structure] Reserved_2 (2 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R172</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.6</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_PROCESSINFO Auxiliary Block Structure] ProcessName (variable): A null-terminated Unicode string that contains the client process name.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R173</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.6</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_PROCESSINFO Auxiliary Block Structure] [ProcessName (variable)] This field is offset from the beginning of the AUX_HEADER structure by the ProcessNameOffset field value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4806</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.7</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_DEFMDB_SUCCESS Auxiliary Block Structure] The AUX_PERF_DEFMDB_SUCCESS auxiliary block structure reports a previously successful RPC to the messaging server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R174</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.7</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_DEFMDB_SUCCESS Auxiliary Block Structure] TimeSinceRequest (4 bytes): The number of milliseconds since a successful request occurred.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R175</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.7</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_DEFMDB_SUCCESS Auxiliary Block Structure] TimeToCompleteRequest (4 bytes): The number of milliseconds the successful request took to complete.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R176</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.7</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_DEFMDB_SUCCESS Auxiliary Block Structure] RequestID (2 bytes): The request identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R177</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.7</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_DEFMDB_SUCCESS Auxiliary Block Structure] Reserved (2 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4807</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.8</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_DEFGC_SUCCESS Auxiliary Block Structure] The AUX_PERF_DEFGC_SUCCESS auxiliary block structure reports a previously successful call to the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R181</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.8</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_DEFGC_SUCCESS Auxiliary Block Structure] ServerID (2 bytes): The server identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R182</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.8</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_DEFGC_SUCCESS Auxiliary Block Structure] SessionID (2 bytes): The session identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R183</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.8</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_DEFGC_SUCCESS Auxiliary Block Structure] TimeSinceRequest (4 bytes): The number of milliseconds since successful request occurred.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R184</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.8</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_DEFGC_SUCCESS Auxiliary Block Structure] TimeToCompleteRequest (4 bytes): The number of milliseconds the successful request took to complete.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R185</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.8</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_DEFGC_SUCCESS Auxiliary Block Structure] RequestOperation (1 byte): The client-defined operation that was successful.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R186</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.8</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_DEFGC_SUCCESS Auxiliary Block Structure] Reserved (3 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4808</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.9</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS Auxiliary Block Structure] The AUX_PERF_MDB_SUCCESS auxiliary block structure reports a previously successful RPC to the messaging server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R190</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.9</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS Auxiliary Block Structure] ClientID (2 bytes): The client identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R191</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.9</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS Auxiliary Block Structure] ServerID (2 bytes): The server identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R192</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.9</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS Auxiliary Block Structure] SessionID (2 bytes): The session identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R193</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.9</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS Auxiliary Block Structure] RequestID (2 bytes): The request identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R194</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.9</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS Auxiliary Block Structure] TimeSinceRequest (4 bytes): The number of milliseconds since successful request occurred.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R195</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.9</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS Auxiliary Block Structure] TimeToCompleteRequest (4 bytes): The number of milliseconds the successful request took to complete.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4809</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.10</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS_V2 Auxiliary Block Structure] The AUX_PERF_MDB_SUCCESS_V2 auxiliary header structure reports a previously successful RPC to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R196</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.10</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS_V2 Auxiliary Block Structure] ProcessID (2 bytes): The process identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R197</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.10</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS_V2 Auxiliary Block Structure] ClientID (2 bytes): The client identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R198</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.10</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS_V2 Auxiliary Block Structure] ServerID (2 bytes): The server identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R199</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.10</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS_V2 Auxiliary Block Structure] SessionID (2 bytes): The session identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R200</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.10</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS_V2 Auxiliary Block Structure] RequestID (2 bytes): The request identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R201</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.10</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS_V2 Auxiliary Block Structure] Reserved (2 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R204</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.10</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS_V2 Auxiliary Block Structure] TimeSinceRequest (4 bytes): The number of milliseconds since successful request occurred.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R205</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.10</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_MDB_SUCCESS_V2 Auxiliary Block Structure] TimeToCompleteRequest (4 bytes): The number of milliseconds the successful request took to complete.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4810</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.11</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS Auxiliary Block Structure] The AUX_PERF_GC_SUCCESS auxiliary block structure reports a previously successful call to the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R206</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.11</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS Auxiliary Block Structure] ClientID (2 bytes): The client identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R207</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.11</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS Auxiliary Block Structure] ServerID (2 bytes): The server identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R208</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.11</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS Auxiliary Block Structure] SessionID (2 bytes): The session identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R209</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.11</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS Auxiliary Block Structure] Reserved_1 (2 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R213</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.11</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS Auxiliary Block Structure] TimeSinceRequest (4 bytes): The number of milliseconds since successful request occurred.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R214</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.11</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS Auxiliary Block Structure] TimeToCompleteRequest (4 bytes): The number of milliseconds the successful request took to complete.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R215</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.11</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS Auxiliary Block Structure] RequestOperation (1 byte): The client-defined operation that was successful.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R216</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.11</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS Auxiliary Block Structure] Reserved_2 (3 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4811</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.12</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS_V2 Auxiliary Block Structure] The AUX_PERF_GC_SUCCESS_V2 auxiliary block structure reports a previously successful call to the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R220</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.12</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS_V2 Auxiliary Block Structure] ProcessID (2 bytes): The process identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R221</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.12</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS_V2 Auxiliary Block Structure] ClientID (2 bytes): The client identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R222</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.12</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS_V2 Auxiliary Block Structure] ServerID (2 bytes): The server identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R223</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.12</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS_V2 Auxiliary Block Structure] SessionID (2 bytes): The session identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R224</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.12</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS_V2 Auxiliary Block Structure] TimeSinceRequest (4 bytes): The number of milliseconds since successful request occurred.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R225</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.12</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS_V2 Auxiliary Block Structure] TimeToCompleteRequest (4 bytes): The number of milliseconds the successful request took to complete.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R226</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.12</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS_V2 Auxiliary Block Structure] RequestOperation (1 byte): The client-defined operation that was successful.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R227</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.12</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_GC_SUCCESS_V2 Auxiliary Block Structure] Reserved (3 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4812</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.13</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE Auxiliary Block Structure] The AUX_PERF_FAILURE auxiliary block structure reports a previously failed call to the messaging server or the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R231</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.13</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE Auxiliary Block Structure] ClientID (2 bytes): The client identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R232</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.13</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE Auxiliary Block Structure] ServerID (2 bytes): The server identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R233</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.13</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE Auxiliary Block Structure] SessionID (2 bytes): The session identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R234</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.13</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE Auxiliary Block Structure] RequestID (2 bytes): The request identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R235</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.13</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE Auxiliary Block Structure] TimeSinceRequest (4 bytes): The number of milliseconds since a request failure occurred.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R236</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.13</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE Auxiliary Block Structure] TimeToFailRequest (4 bytes): The number of milliseconds the failed request took to complete.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R237</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.13</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE Auxiliary Block Structure] ResultCode (4 bytes): The error code returned for the failed request.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1272</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.13</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE Auxiliary Block Structure] ResultCode (4 bytes): Returned error codes are implementation-specific.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R238</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.13</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE Auxiliary Block Structure] RequestOperation (1 byte): The client-defined operation that failed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R239</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.13</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE Auxiliary Block Structure] Reserved (3 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4813</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.14</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE_V2 Auxiliary Block Structure] The AUX_PERF_FAILURE_V2 auxiliary block structure reports a previously failed call to the messaging server or the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R243</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.14</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE_V2 Auxiliary Block Structure] ProcessID (2 bytes): The process identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R244</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.14</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE_V2 Auxiliary Block Structure] ClientID (2 bytes): The client identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R245</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.14</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE_V2 Auxiliary Block Structure] ServerID (2 bytes): The server identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R246</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.14</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE_V2 Auxiliary Block Structure] SessionID (2 bytes): The session identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R247</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.14</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE_V2 Auxiliary Block Structure] RequestID (2 bytes): The request identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R248</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.14</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE_V2 Auxiliary Block Structure] Reserved_1 (2 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R252</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.14</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE_V2 Auxiliary Block Structure] TimeSinceRequest (4 bytes): The number of milliseconds since a request failure occurred.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R253</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.14</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE_V2 Auxiliary Block Structure] TimeToFailRequest (4 bytes): The number of milliseconds the request failure took to complete.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R254</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.14</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE_V2 Auxiliary Block Structure] ResultCode (4 bytes): The error code return for the failed request.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R255</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.14</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE_V2 Auxiliary Block Structure] ResultCode (4 bytes): Returned error codes are implementation-specific.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R256</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.14</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE_V2 Auxiliary Block Structure] RequestOperation (1 byte): The client-defined operation that failed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R257</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.14</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_FAILURE_V2 Auxiliary Block Structure] Reserved_2 (3 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4814</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] The AUX_CLIENT_CONTROL auxiliary block structure reports a change in client behavior.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1842</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] EnableFlags [in block AUX_CLIENT_CONTROL is] 4 bytes.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4815</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] [EnableFlags (4 bytes)] The flags that instruct the client to either enable or disable behavior.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R261</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] EnableFlags (4 bytes): The flag values  [ENABLE_PERF_SENDTOSERVER 0x00000001, ENABLE_PERF_SENDTOMAILBOX 0x00000002, ENABLE_COMPRESSION 0x00000004, ENABLE_HTTP_TUNNELING 0x00000008, ENABLE_PERF_SENDGCDATA 0x00000010] and their meanings are described in the following table.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R262</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] [EnableFlags (4 bytes)] To disable a client behavior, the server does not set the flag to the specified value [0x00000001, 0x00000004, 0x00000008, 0x000000010].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R263</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] [EnableFlags (4 bytes)] Flag ENABLE_PERF_SENDTOSERVER 0x00000001 means client MUST start sending performance information to server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R265</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] [EnableFlags (4 bytes)] Flag ENABLE_COMPRESSION 0x00000004 means client MUST compress information up to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R266</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] [EnableFlags (4 bytes)] [Flag "ENABLE_COMPRESSION 0x00000004] Compression MUST ordinarily be the default behavior, but this allows the server to "disable" compression.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R267</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] [EnableFlags (4 bytes)] Flag ENABLE_HTTP_TUNNELING 0x00000008 means client MUST use RPC over HTTP if configured.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R268</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] [EnableFlags (4 bytes)] Flag ENABLE_PERF_SENDGCDATA 0x00000010 means client MUST include performance data of the client that is communicating with the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1843</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] ExpiryTime [in block AUX_CLIENT_CONTROL is] 4 bytes.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R269</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] ExpiryTime (4 bytes): The number of milliseconds the client keeps unsent performance data before the data is expired.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R270</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] [ExpiryTime (4 bytes)] Expired data is not transmitted to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R271</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.15</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONTROL Auxiliary Block Structure] [ExpiryTime (4 bytes)] This [Expiry Time] prevents the server from receiving stale performance information that is stored on the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4816</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.16</ns1:Doc_Sect>
		<ns1:Description>[In AUX_OSVERSIONINFO Auxiliary Block Structure] The AUX_OSVERSIONINFO auxiliary block structure sends the server's operating system version information to the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R272</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.16</ns1:Doc_Sect>
		<ns1:Description>[In AUX_OSVERSIONINFO Auxiliary Block Structure] OSVersionInfoSize (4 bytes): The size of this AUX_OSVERSIONINFO structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R273</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.16</ns1:Doc_Sect>
		<ns1:Description>[In AUX_OSVERSIONINFO Auxiliary Block Structure] MajorVersion (4 bytes): The major version number of the operating system of the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R274</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.16</ns1:Doc_Sect>
		<ns1:Description>[In AUX_OSVERSIONINFO Auxiliary Block Structure] MinorVersion (4 bytes): The minor version number of the operating system of the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R275</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.16</ns1:Doc_Sect>
		<ns1:Description>[In AUX_OSVERSIONINFO Auxiliary Block Structure] BuildNumber (4 bytes): The build number of the operating system of the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4819</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.16</ns1:Doc_Sect>
		<ns1:Description>[In AUX_OSVERSIONINFO Auxiliary Block Structure] Reserved1 (132 bytes): Reserved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4820</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.16</ns1:Doc_Sect>
		<ns1:Description>[In AUX_OSVERSIONINFO Auxiliary Block Structure] [Reserved1] MUST be ignored when received.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R278</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.16</ns1:Doc_Sect>
		<ns1:Description>[In AUX_OSVERSIONINFO Auxiliary Block Structure] ServicePackMajor (2 bytes): The major version number of the latest operating system service pack that is installed on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R279</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.16</ns1:Doc_Sect>
		<ns1:Description>[In AUX_OSVERSIONINFO Auxiliary Block Structure] ServicePackMinor (2 bytes): The minor version number of the latest operating system service pack that is installed on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4821</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.16</ns1:Doc_Sect>
		<ns1:Description>[In AUX_OSVERSIONINFO Auxiliary Block Structure] Reserved2 (4 bytes): Reserved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4822</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.16</ns1:Doc_Sect>
		<ns1:Description>[In AUX_OSVERSIONINFO Auxiliary Block Structure] [Reserved2] MUST be ignored when received.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4823</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.17</ns1:Doc_Sect>
		<ns1:Description>[In AUX_EXORGINFO Auxiliary Block Structure] The AUX_EXORGINFO auxiliary block structure informs the client of the presence of public folders within the organization.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R282</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.17</ns1:Doc_Sect>
		<ns1:Description>[In AUX_EXORGINFO Auxiliary Block Structure] OrgFlags (4 bytes): The flags indicating the server organizational information.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R284.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R283</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.17</ns1:Doc_Sect>
		<ns1:Description>[In AUX_EXORGINFO Auxiliary Block Structure] [OrgFlags (4 bytes)] The following table [table in section 2.2.2.19] specifies the valid values [PUBLIC_FOLDERS_ENABLED 0x00000001, USE_AUTODISCOVER_FOR_PUBLIC_FOLDER_CONFIGURATION 0x00000002].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R284</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.17</ns1:Doc_Sect>
		<ns1:Description>[In AUX_EXORGINFO Auxiliary Block Structure] [OrgFlags (4 bytes)] Flag PUBLIC_FOLDERS_ENABLED 0x00000001 means organization has public folders.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1852</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.17</ns1:Doc_Sect>
		<ns1:Description>[In AUX_EXORGINFO Auxiliary Block Structure] [OrgFlags (4 bytes)] Flag USE_AUTODISCOVER_FOR_PUBLIC_FOLDER_CONFIGURATION 0x00000002 means the client SHOULD&lt;3&gt; configure public folders using the Autodiscover Publishing and Lookup Protocol, as specified in [MS-OXDSCLI].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4824</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.18</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_ACCOUNTINFO Auxiliary Block Structure] The AUX_PERF_ACCOUNTINFO auxiliary block structure reports the client account information to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R285</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.18</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_ACCOUNTINFO Auxiliary Block Structure] ClientID (2 bytes): The client assigned identification number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R286</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.18</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_ACCOUNTINFO Auxiliary Block Structure] [ClientID (2 bytes)] Maps to the ClientID of the AUX_PERF_CLIENTINFO structure, as specified in section 2.2.2.2.4.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R287</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.18</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_ACCOUNTINFO Auxiliary Block Structure] Reserved (2 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R291</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.18</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PERF_ACCOUNTINFO Auxiliary Block Structure] Account (16 bytes): A GUID representing the client account information that relates to the client identification number in the ClientID field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R291001</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.19</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_CAPABILITIES Auxiliary Block Structure] The AUX_SERVER_CAPABILITIES auxiliary block structure informs the client that the server supports specific capabilities.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R291002</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.19</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_CAPABILITIES Auxiliary Block Structure] ServerCapabilityFlags (4 bytes): A flag that indicates that the server supports specific capabilities. </ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requrements: MS-OXCRPC_R291004, MS-OXCRPC_R291007, MS-OXCRPC_R291009.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R291003</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.19</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_CAPABILITIES Auxiliary Block Structure] The valid flag values are specified in the following table.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R291004</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.19</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_CAPABILITIES Auxiliary Block Structure] The value of Flag PACKED_FAST_TRANSFER_UPLOAD_BUFFERS is 0x00000001.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R291005</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.19</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_CAPABILITIES Auxiliary Block Structure] [PACKED_FAST_TRANSFER_UPLOAD_BUFFERS means]The server supports the client sending up packed upload extended buffers, see section 3.1.4.2.1.2.1, containing RopFastTransferDestinationPutBuffer ROP ([MS-OXCROPS] section 2.2.12.2).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R291006</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.19</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_CAPABILITIES Auxiliary Block Structure] [PACKED_FAST_TRANSFER_UPLOAD_BUFFERS means] The server supports the client sending up packed upload extended buffers, see section 3.1.4.2.1.2.1, containing RopFastTransferDestinationPutBuffetExtended ROP ([MS-OXCROPS] section 2.2.12.3).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R291007</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.19</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_CAPABILITIES Auxiliary Block Structure] The value of Flag PACKED_WRITE_STREAM_UPLOAD_BUFFERS is 0x00000002.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R291008</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.19</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_CAPABILITIES Auxiliary Block Structure] [PACKED_WRITE_STREAM_UPLOAD_BUFFERS means] The server supports the client sending up packed upload extended buffers, see section 3.1.4.2.1.2.1, containing RopWriteStreamExtended ROP ([MS-OXCROPS] section 2.2.9.4).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R291009</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.19</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_CAPABILITIES Auxiliary Block Structure] The value of Flag ULTRA_LARGE_PACKED_DOWNLOAD_BUFFERS is 0x00000008.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R291010</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.19</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_CAPABILITIES Auxiliary Block Structure] [ULTRA_LARGE_PACKED_DOWNLOAD_BUFFERS means] The server supports the client asking for packed download chained buffers in EcDoRpcExt2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4825</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.20</ns1:Doc_Sect>
		<ns1:Description>[In AUX_ENDPOINT_CAPABILITIES Auxiliary Block Structure] The AUX_ENDPOINT_CAPABILITIES auxiliary block structure informs the client that the server supports multiple interfaces on a single HTTP endpoint.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4826</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.20</ns1:Doc_Sect>
		<ns1:Description>[In AUX_ENDPOINT_CAPABILITIES Auxiliary Block Structure] EndpointCapabilityFlag (4 bytes): A flag that indicates that the server combines capabilities on a single endpoint.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R1521.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1521</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.20</ns1:Doc_Sect>
		<ns1:Description>[In AUX_ENDPOINT_CAPABILITIES Auxiliary Block Structure] EndpointCapabilityFlag (4 bytes): The valid flag values [ENDPOINT_CAPABILITIES_SINGLE_ENDPOINT 0x00000001] are specified in the following table.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1522</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.20</ns1:Doc_Sect>
		<ns1:Description>[In AUX_ENDPOINT_CAPABILITIES Auxiliary Block Structure] [EndpointCapabilityFlag (4 bytes)] The server supports combined Directory Service Referral interface (RFRI), name service provider interface (NSPI), and EMSMDB interface on a single HTTP endpoint.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1768</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.20</ns1:Doc_Sect>
		<ns1:Description>[In AUX_ENDPOINT_CAPABILITIES Auxiliary Block Structure] [EndpointCapabilityFlag (4 bytes)] For more information about RFRI, see [MS-OXABREF]. For more information about NSPI, see [MS-OXNSPI].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1523</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.20</ns1:Doc_Sect>
		<ns1:Description>[In AUX_ENDPOINT_CAPABILITIES Auxiliary Block Structure] [EndpointCapabilityFlag (4 bytes)] The server MAY&lt;4&gt; process requests for different interfaces independently even when requests are transmitted on the same connection.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R1921.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1525</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.20</ns1:Doc_Sect>
		<ns1:Description>[In AUX_ENDPOINT_CAPABILITIES Auxiliary Block Structure] [EndpointCapabilityFlag (4 bytes)] A call to one interface is not to be blocked by a previous call to a different interface on the same connection.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4827</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.21</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONNECTION_INFO Auxiliary Block Structure] The AUX_CLIENT_CONNECTION_INFO auxiliary block structure provides information about the client connection to be logged by the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1526</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.21</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONNECTION_INFO Auxiliary Block Structure] ConnectionGUID (16 bytes): The GUID of the connection to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1527</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.21</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONNECTION_INFO Auxiliary Block Structure] OffsetConnectionContextInfo (2 bytes): The offset from the beginning of the AUX_HEADER structure to the ConnectionContextInfo field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1528</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.21</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONNECTION_INFO Auxiliary Block Structure] [OffsetConnectionContextInfo (2 bytes)] A value of zero indicates that the ConnectionContextInfo field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1529</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.21</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONNECTION_INFO Auxiliary Block Structure] Reserved (2 bytes): Padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1530</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.21</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONNECTION_INFO Auxiliary Block Structure] ConnectionAttempts (2 bytes): The number of connection attempts.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4828</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.21</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONNECTION_INFO Auxiliary Block Structure] ConnectionFlags (4 bytes): A flag designating the mode of operation.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1531</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.21</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONNECTION_INFO Auxiliary Block Structure] ConnectionFlags (4 bytes): A value of 0x0001 for this field means that the client is running in cached mode.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1532</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.21</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONNECTION_INFO Auxiliary Block Structure] [ConnectionFlags (4 bytes)] A value of 0x0000 means that the client is not designating a mode of operation.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1533</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.21</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONNECTION_INFO Auxiliary Block Structure] ConnectionContextInfo (variable): A null-terminated Unicode string that contains opaque connection context information to be logged by the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1534</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.21</ns1:Doc_Sect>
		<ns1:Description>[In AUX_CLIENT_CONNECTION_INFO Auxiliary Block Structure] [ConnectionContextInfo (variable)] This field is offset from the beginning of the AUX_HEADER structure by the OffsetConnectionContextInfo field value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4829</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.22</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_SESSION_INFO Auxiliary Block Structure] The AUX_SERVER_SESSION_INFO auxiliary block structure provides server information to be logged by the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1535</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.22</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_SESSION_INFO Auxiliary Block Structure] OffsetServerSessionContextInfo (2 bytes): The offset from the beginning of the AUX_HEADER structure to the ServerSessionContextInfo field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1536</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.22</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_SESSION_INFO Auxiliary Block Structure] [OffsetServerSessionContextInfo (2 bytes)] A value of zero indicates that the ServerSessionContextInfo field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1539</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.22</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_SESSION_INFO Auxiliary Block Structure] ServerSessionContextInfo (variable): A null-terminated Unicode string that contains opaque server session context information to be logged by the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1540</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.22</ns1:Doc_Sect>
		<ns1:Description>[In AUX_SERVER_SESSION_INFO Auxiliary Block Structure] [ServerSessionContextInfo (variable)] This field is offset from the beginning of the AUX_HEADER structure by the OffsetServerSessionContextInfo field value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4830</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] The AUX_PROTOCOL_DEVICE_IDENTIFICATION auxiliary block structure identifies man-in-middle equipment used in messaging applications.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1853</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] DeviceManufacturerOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure, as specified in section 2.2.2.2, to the DeviceManufacturer field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1854</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] A value of zero indicates that the DeviceManufacturer field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1855</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] DeviceModelOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure to the DeviceModel field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1856</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] A value of zero indicates that the DeviceModel field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1857</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] DeviceSerialNumberOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure to the DeviceSerialNumber field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1858</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] A value of zero indicates that the DeviceSerialNumber field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1859</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] DeviceVersionOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure to the DeviceVersion field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1860</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] A value of zero indicates that the DeviceVersion field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1861</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] DeviceFirmwareVersionOffset (2 bytes): The offset from the beginning of the AUX_HEADER structure to the DeviceFirmwareVersion field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1862</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] A value of zero indicates that the DeviceFirmwareVersion field is null or empty.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1863</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] DeviceManufacturer (variable): A null-terminated Unicode string that contains the name of the manufacturer of the device.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1864</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] This field is offset from the beginning of the AUX_HEADER structure by the value of the DeviceManufacturerOffset field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1865</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] DeviceModel (variable): A null-terminated Unicode string that contains the model name of the device.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1866</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] This field is offset from the beginning of the AUX_HEADER structure by the value of the DeviceModelOffset field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1867</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] DeviceSerialNumber (variable): A null-terminated Unicode string that contains the serial number of the device.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1868</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] This field is offset from the beginning of the AUX_HEADER structure by the value of the DeviceSerialNumberOffset field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1869</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] DeviceVersion (variable): A null-terminated Unicode string that contains the version number of the device.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1870</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] This variable field is offset from the beginning of the AUX_HEADER structure by the value of the DeviceVersionOffset field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1871</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] DeviceFirmwareVersion (variable): A null-terminated Unicode string that contains the firmware version of the device.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1872</ns1:REQ_ID>
		<ns1:Doc_Sect>2.2.2.2.23</ns1:Doc_Sect>
		<ns1:Description>[In AUX_PROTOCOL_DEVICE_IDENTIFICATION Auxiliary Block Structure] This field is offset from the beginning of the AUX_HEADER structure by the value of the DeviceFirmwareVersionOffset field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R298</ns1:REQ_ID>
		<ns1:Doc_Sect>3</ns1:Doc_Sect>
		<ns1:Description>[In Protocol Details] The Wire Format Protocol contains two RPC interfaces: EMSMDB, as specified in section 3.1 and section 3.2, and AsyncEMSMDB as specified in section 3.3 and section 3.4.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R299</ns1:REQ_ID>
		<ns1:Doc_Sect>3</ns1:Doc_Sect>
		<ns1:Description>[In Protocol Details] For some functionality through the EMSMDB interface, the client is required to first establish a session context handle by a successful call to the EcDoConnectEx method, as specified in section 3.1.4.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R300</ns1:REQ_ID>
		<ns1:Doc_Sect>3</ns1:Doc_Sect>
		<ns1:Description>[In Protocol Details] The session context handle is an RPC context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R302</ns1:REQ_ID>
		<ns1:Doc_Sect>3</ns1:Doc_Sect>
		<ns1:Description>[In Protocol Details] All method calls that require a valid session context handle [EcDoDisconnect, EcRRegisterPushNotification, EcDoRpcExt2, EcDoAsyncConnectEx] are listed in the following table.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R372, MS-OXCRPC_R379.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R303</ns1:REQ_ID>
		<ns1:Doc_Sect>3</ns1:Doc_Sect>
		<ns1:Description>[In Protocol Details] The interface of session context handle-based method EcDoDisconnect is EMSMDB.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R304</ns1:REQ_ID>
		<ns1:Doc_Sect>3</ns1:Doc_Sect>
		<ns1:Description>[In Protocol Details] The interface of session context handle-based method EcRRegisterPushNotification is EMSMDB.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R305</ns1:REQ_ID>
		<ns1:Doc_Sect>3</ns1:Doc_Sect>
		<ns1:Description>[In Protocol Details] The interface of session context handle-based method EcDoRpcExt2 is EMSMDB.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R306</ns1:REQ_ID>
		<ns1:Doc_Sect>3</ns1:Doc_Sect>
		<ns1:Description>[In Protocol Details] The interface of session context handle-based method EcDoAsyncConnectEx is EMSMDB.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R307</ns1:REQ_ID>
		<ns1:Doc_Sect>3</ns1:Doc_Sect>
		<ns1:Description>[In Protocol Details] For some functionality through the AsyncEMSMDB interface, the client is required to call specific interface methods first to establish an asynchronous context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R308</ns1:REQ_ID>
		<ns1:Doc_Sect>3</ns1:Doc_Sect>
		<ns1:Description>[In Protocol Details] The asynchronous context handle is an RPC context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R309</ns1:REQ_ID>
		<ns1:Doc_Sect>3</ns1:Doc_Sect>
		<ns1:Description>[In Protocol Details] To establish an asynchronous context handle, a call to the EcDoAsyncConnectEx method on the EMSMDB interface MUST be successful.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R310</ns1:REQ_ID>
		<ns1:Doc_Sect>3</ns1:Doc_Sect>
		<ns1:Description>[In Protocol Details] All method calls that require a valid asynchronous context handle [EcDoAsyncWaitEx] are listed in the following table.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R311</ns1:REQ_ID>
		<ns1:Doc_Sect>3</ns1:Doc_Sect>
		<ns1:Description>[In Protocol Details] The interface of EcDoAsyncWaitEx is AsyncEMSMDB.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R312</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1</ns1:Doc_Sect>
		<ns1:Description>[In EMSMDB Server Details] The server responds to messages it [the server] receives from the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1542</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] This section describes a conceptual model of possible data organization that an implementation maintains to participate in this protocol [MS-OXCRPC].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1543</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] The described organization is provided to facilitate the explanation of how the protocol behaves.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1544</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] This specification [MS-OXCRPC] does not mandate that implementations adhere to this model as long as their external behavior is consistent with that described in this specification.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1545</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] This protocol [MS-OXCRPC] includes the following abstract data model (ADM) element: Global.Handle, as specified in section 3.1.1.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1546</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global] The following ADM element [Global.Handle] is maintained by the server for each session context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R316</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] Global.Handle: Some methods on this interface [EMSMDB] require session context handle information to be stored on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R317</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] Some methods on this interface [EMSMDB] require session context handle information to be used across multiple interface calls for a long duration of time.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R318</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] For these method [which requires session context handle information to be stored on the server and used across multiple interface calls for a long duration of time] calls, this protocol [MS-OXCRPC] is stateful.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R319</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] The server stores this session context information.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1266</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] The server provides a session context handle (the Global.Handle ADM element) to the client to make subsequent interface calls by using this same session context information.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R321</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] The server keeps a list of all active sessions and their associated session context information.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R803</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] Each session context is identified by a Global.Handle ADM element.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R323</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] After a session context has been established, a client can access messaging resources through this session context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R324</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] The server keeps track of all open resources or any state information specific to the session on the session context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R325</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] This [open resources or state information specific to the session on the Session Context] can include but is not limited to resources, such as folders, messages, tables, attachments, streams, associated asynchronous context handles, and notification callbacks.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R326</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] The server isolates all resources associated with one session context from all other session contexts on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R327</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] Access to resources on one session context is not allowed using a session context handle of another session context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R328</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] When the session context handle is destroyed, the session context and all session context information is destroyed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1294</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] When the client connection is lost, the session context and all session context information are destroyed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1295</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] When the client connection is lost, all open resources are closed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1292</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] When the session context handle is destroyed, all open resources are closed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1296</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] When the client connection is lost, all Server objects that are associated with the session context are released.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1293</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Global.Handle] When the session context is destroyed, all Server objects that are associated with the session context are released.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R335</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] The server initializes the RPC session by doing the following: 1. The server MUST register the different protocol sequences that will allow the server to communicate with the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R337</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] The supported protocol sequences are specified in section 2.1, including named endpoints.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1360</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] 2. The server MUST register the following authentication methods that are allowed on the EMSMDB interface.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1547</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] The server SHOULD&lt;5&gt; register the following authentication methods.
[RPC_C_AUTHN_WINNT, RPC_C_AUTHN_GSS_KERBEROS, &lt;6&gt;RPC_C_AUTHN_GSS_NEGOTIATE, RPC_C_AUTHN_NONE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1749, MS-OXCRPC_R1750, MS-OXCRPC_R1751, MS-OXCRPC_R1550, MS-OXCRPC_R1915.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1361</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] A client authenticates using one of the following authentication methods [RPC_C_AUTHN_WINNT, RPC_C_AUTHN_GSS_KERBEROS, &lt;6&gt;RPC_C_AUTHN_GSS_NEGOTIATE, RPC_C_AUTHN_NONE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1362</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] 3. Start listening for RPCs.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R344</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] 4. Register the EMSMDB interface.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R348</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] 5. Register the EMSMDB interface to all the registered binding handles created previously.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R352</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] This protocol [MS-OXCRPC] MUST indicate to the RPC runtime that it is to perform a strict Network Data Representation (NDR) data consistency check at target level 5.0, as specified in [MS-RPCE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R353</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] The methods [Opnum0NotUsedOnWire, EcDoDisconnect, Opnum2NotUsedOnWire, Opnum3NotUsedOnWire, EcRRegisterPushNotification, Opnum5NotUsedOnWire, EcDummyRpc, Opnum7NotUsedOnWire, Opnum8NotUsedOnWire, Opnum9NotUsedOnWire, EcDoConnectEx, EcDoRpcExt2, Opnum12NotUsedOnWire, Opnum13NotUsedOnWire, EcDoAsyncConnectEx] that this interface includes are listed in the following table [table in section 3.1.4].&lt;7&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirement: MS-OXCRPC_R1845.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R354</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] The phrase "Reserved" means that the client MUST NOT send the opnum.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1298</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] The server behavior is undefined.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R367</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum0NotUsedOnWire: Reserved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R368</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum0NotUsedOnWire: opnum: 0</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R369</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method EcDoDisconnect: Closes a Session Context with the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R401.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R370</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method EcDoDisconnect: The Session Context is destroyed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1299</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] [EcDoDisconnect] All associated server state, objects, and resources that are associated with the Session Context are released.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R372</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] [EcDoDisconnect] The method requires an active session context handle to be returned from the EcDoConnectEx method, as specified in section 3.1.4.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R373</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum2NotUsedOnWire: Reserved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R374</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum2NotUsedOnWire: opnum: 2</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R375</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum3NotUsedOnWire: Reserved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R376</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum3NotUsedOnWire: opnum: 3</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R377</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method EcRRegisterPushNotification: Registers a callback address with the server for a Session Context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R415.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R378</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] [EcRRegisterPushNotification] The callback address is used to notify the client of a pending event on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R422.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R379</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] [EcRRegisterPushNotification] The method requires an active session context handle to be returned from the EcDoConnectEx method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R380</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum5NotUsedOnWire: Reserved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R381</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum5NotUsedOnWire: opnum: 5</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R382</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method EcDummyRpc: This call returns a SUCCESS.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R464.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R383</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] [EcDummyRpc] A client can use it to determine whether it can communicate with the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R384</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum7NotUsedOnWire: Reserved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R385</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum7NotUsedOnWire: opnum: 7</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R386</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum8NotUsedOnWire: Reserved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R387</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum8NotUsedOnWire: opnum: 8</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R388</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum9NotUsedOnWire: Reserved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R389</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum9NotUsedOnWire: opnum: 9</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R390</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method EcDoConnectEx: Creates a session context handle on the server to be used in subsequent calls to EcDoDisconnect, EcDoRpcExt2, and EcDoAsyncConnectEx.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R475.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R391</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method EcDoRpcExt2: Passes generic ROP commands to the server for processing within a Session Context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R1290.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R392</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] [EcDoRpcExt2] The method requires an active session context handle to be returned from the EcDoConnectEx method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R393</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum12NotUsedOnWire: Reserved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R394</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum12NotUsedOnWire: opnum: 12</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R395</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum13NotUsedOnWire: Reserved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R396</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method Opnum13NotUsedOnWire: opnum: 13</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R397</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method EcDoAsyncConnectEx: Binds a session context handle that is returned in the EcDoConnectEx method to a new asynchronous context handle that can be used in calls to the EcDoAsyncWaitEx method (section 3.3.4.1) in the AsyncEMSMDB interface.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R704.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R398</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] [EcDoAsyncConnectEx] The method requires an active session context handle to be returned from the EcDoConnectEx method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R475</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] The EcDoConnectEx method establishes a new Session Context with the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R476</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] The Session Context is persisted on the server until the client disconnects by using the EcDoDisconnect method, as specified in section 3.1.4.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R477</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] This method [method EcDoConnectEx] returns a session context handle to be used by a client in subsequent calls.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R478</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] hBinding: A valid RPC binding handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4831</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] pcxh: A session context handle for the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R479</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] pcxh: On success, the server MUST return a unique value to be used as a session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Partially verified by derived requirement: MS-OXCRPC_R4790.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4790</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] pcxh: On success, the server MUST return a value to be used as a session context handle, and the value is not the same as the next EcDoConnectEx successful call.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R479:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R483</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pcxh] On failure, the server MUST return a zero value as the session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R485</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] szUserDN: The DN of the user who is calling the EcDoConnectEx method in a directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R486</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [szUserDN] The value of the szUserDN parameter is similar to the following: "/o=First Organization/ou=First Administrative Group/cn=recipients/cn=janedow".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4832</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] ulFlags: A flag value that designates the type of connection being established.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R487</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] ulFlags: On input this parameter contains connection bits that MUST be set.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R488</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulFlags] All flag values not in the following table are reserved connection flags.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R489</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulFlags] [Value 0x00000000 means] requests connection without administrator privilege.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R490</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulFlags] [Value 0x00000001 means] Requests administrator behavior, which causes the server to check that the user has administrator privilege.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1560</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulFlags] [Value 0x00008000 means] If this flag is not passed and the client version (as specified by the rgwClientVersion parameter) is less than 12.00.0000.000 and no public folders are configured within the messaging system, the server MUST fail the connection attempt with error code ecClientVerDisallowed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4833</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulFlags] The AUX_EXORGINFO auxiliary block structure, specified in section 2.2.2.2.17, informs the client of the presence of public folders within the organization.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4834</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulFlags] The use of the AUX_EXORGINFO auxiliary block structure is further defined in section 3.1.4.1.2.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1561</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulFlags] [Value 0x00008000 means] If this flag is passed and the client version (as specified by the rgwClientVersion parameter) is less than 12.00.0000.000, the server MUST NOT fail the connection attempt due to public folders not being configured within the messaging system.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1562</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulFlags] [Value 0x00008000 means] If the client version (as specified by the rgwClientVersion parameter) is greater than or equal to 12.00.0000.000, the server MUST NOT fail the connection attempt due to public folders not being configured within the messaging system (regardless of whether or not this flag is passed).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R491</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] ulConMod: A client-derived 32-bit hash value of the DN passed in the szUserDN parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1302</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulConMod] The server determines which public folder replica to use when accessing public folder information when more than one replica of a folder exists.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R493</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulConMod] The hash can be used to distribute client access across replicas in a deterministic way for load balancing.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R495</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] cbLimit: MUST be set to zero when sent and MUST be ignored when received.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R496</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] ulCpid: The code page in which text data is sent.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4835</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulCpid] If the Unicode format is not requested by the client on subsequent calls that use this Session Context, the ulCpid parameter sets the code page to be used in subsequent calls.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R497</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] ulLcidString: The local ID for everything other than sorting.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R498</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] ulLcidSort: The local ID for sorting.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R499</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] ulIcxrLink: A value used to link the Session Context created by this call with a currently existing Session Context on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R500</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulIcxrLink] To request Session Context linking, the client MUST pass the value of 0xFFFFFFFF.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R501</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulIcxrLink] To link to an existing Session Context, this value [ulIcxrLink] is the session index value returned in the piCxr parameter from a previous call to the EcDoConnectEx method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R502</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulIcxrLink] In addition to passing the session index in the ulIcxrLink parameter, the client sets the pulTimeStamp parameter to the value that was returned in the pulTimeStamp parameter from the previous call to the EcDoConnectEx method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R503</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulIcxrLink] These two values [value returned in field piCxr from a previous EcDoConnectEx call and value returned in the pulTimeStamp field from the previous EcDoConnectEx call] MUST be used by the server to identify an active session with the same session index and session creation time stamp.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R505</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulIcxrLink] If a session is found, the server MUST link the Session Context created by this call with the one found.&lt;8&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1850, MS-OXCRPC_R508.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R510</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulIcxrLink] [a server allows Session Context linking for the following reasons:] To consume a single Client Access License (CAL) for all the connections made from a single client computer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1274</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulIcxrLink] [a server allows Session Context linking for the following reasons:] This [a single Client Access License (CAL)] gives a client the ability to open multiple independent connections using more than one Session Context on the server but be seen to the server as only consuming a single CAL.&lt;9&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R513</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulIcxrLink] [a server allows Session Context linking for the following reasons:] To get pending notification information for other sessions on the same client computer. For details, see [MS-OXCNOTIF].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R515</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulIcxrLink] Note that the ulIcxrLink parameter is defined as a 32-bit value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R516</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulIcxrLink] Other than passing 0xFFFFFFFF for no Session Context linking, the server only uses the low-order 16 bits as the session index.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R517</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [ulIcxrLink] This value [ulIcxrLink] is the value returned in the piCxr parameter from a previous call to the EcDoConnectEx method, which is the session index and defined as a 16-bit value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R518</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] usFCanConvertCodePages: This parameter is reserved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R519</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [usFCanConvertCodePages] The client MUST pass a value of 0x0001.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R520</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] pcmsPollsMax: An implementation-dependent value that specifies the number of milliseconds that a client waits between polling the server for event information.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R521</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pcmsPollsMax] If the client does not support making asynchronous RPC calls for notifications as specified in section 3.3.4.1, the client can poll the server to determine whether any events are pending for the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R522</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pcmsPollsMax] If the server does not support making asynchronous RPC calls for notifications as specified in section 3.3.4.1, the client can poll the server to determine whether any events are pending for the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R523</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] pcmsPollsMax: If the client is unable to receive notifications via UDP datagrams, as specified in [MS-OXCNOTIF] section 3.2.5.4 and [MS-OXCNOTIF] section 3.2.5.5.2, the client can poll the server to determine whether any events are pending for the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R525</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] pcRetry: An implementation-dependent value that specifies the number of times a client retries future RPCss using the session context handle returned in this call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R526</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pcRetry] This is for client RPCs that fail with RPC status code RPC_S_SERVER_TOO_BUSY (0x000006BB).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R527</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pcRetry] This is a suggested retry count for the client and is not to be enforced by the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4836</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pcRetry] For more details about circumstances under which the RPC_S_SERVER_TOO_BUSY status code is returned, see [MS-OXCROPS] section 3.2.4.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1564</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pcRetry] For more details about how the client handles the RPC_S_SERVER_TOO_BUSY status code, see section 3.2.4.4.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R528</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] pcmsRetryDelay: An implementation-dependent value that specifies the number of milliseconds a client waits before retrying a failed RPC.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R529</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pcmsRetryDelay] If any future RPC to the server using the session context handle returned in this call fails with RPC status code RPC_S_SERVER_TOO_BUSY (0x000006BB), the client waits the number of milliseconds specified in this output parameter [pcmsRetryDelay] before retrying the call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R530</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pcmsRetryDelay] The number of times a client retries is returned in the pcRetry parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R531</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pcmsRetryDelay] This is a suggested delay for the client and is not to be enforced by the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R532</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] piCxr: A session index value that is associated with the session context handle returned from this call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R533</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [piCxr] This value in conjunction with the session creation time stamp value returned in the pulTimeStamp parameter will be passed to a subsequent call to the EcDoConnectEx method, if the client requests to link two Session Contexts.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R534</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [piCxr] &lt;10&gt; The server MUST NOT assign the same session index value to two active Session Contexts.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirement: MS-OXCRPC_R1943.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R535</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [piCxr] The server is free to return any 16-bit value for the session index.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R536</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [piCxr] The server MUST also use the session index when returning a RopPending ROP response ([MS-OXCROPS] section 2.2.14.3) on calls to the EcDoRpcExt2 method, as specified in section 3.1.4.2,  to tell the client which Session Context has pending notifications.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R537</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [piCxr] If Session Contexts are linked, a RopPending ROP response can be returned for any linked Session Context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Partially verified by derived requirement: MS-OXCRPC_R1477.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1477</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [piCxr] If Session Contexts are linked, a RopPending can be returned for the linked Session Context.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R537:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R539</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] szDNPrefix: An implementation-dependent value that specifies a DN prefix that is used to build message recipients.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1366</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [szDNPrefix] An empty value indicates that there is nothing to prepend to recipient entries on messages.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R540</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] szDisplayName: The display name of the user associated with the szUserDN parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R541</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] rgwClientVersion: The client protocol version that the server uses to determine what protocol functionality the client supports.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1566</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgwClientVersion] For more details about how version numbers are interpreted from the wire data, see section 3.2.4.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R543</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] rgwServerVersion: The server protocol version that the client uses to determine what protocol functionality the server supports.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1567</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgwServerVersion] For details about how version numbers are interpreted from the wire data, see section 3.1.4.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R545</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] rgwBestVersion: The minimum client protocol version that the server supports.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R546</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgwBestVersion] This information is useful if the call to the EcDoConnectEx method fails with return code ecVersionMismatch.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R549.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R547</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgwBestVersion] On success, the server returns the value passed in the rgwClientVersion parameter by the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R548</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgwBestVersion] The server cannot perform any client protocol version negotiation.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R549</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgwBestVersion] [If the client passes a client protocol version the server doesn't support,] The server can return the minimum client protocol version required to access the server and fail the call with ecVersionMismatch (0x80040110).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1303</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgwBestVersion] [If the client passes a client protocol version the server supports,] The server can allow the client and return the value passed by the client in the rgwClientVersion parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R551</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgwBestVersion] The server implementation sets the minimum client protocol version that is supported by the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1568</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgwBestVersion] For details about how version numbers are interpreted from the wire data, see section 3.1.4.1.3.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4837</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] pulTimeStamp: The creation time of the newly created Session Context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R553</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pulTimeStamp] On input, a value used with the ulIcxrLink parameter to link the Session Context created by this call with an existing Session Context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R554</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pulTimeStamp] If the ulIcxrLink parameter is not set to 0xFFFFFFFF, the client MUST pass in the value of the  pulTimeStamp parameter returned from the server on a previous call to the EcDoConnectEx method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4838</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pulTimeStamp] For more details, see the ulIcxrLink and piCxr parameter descriptions earlier in this section.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R555</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pulTimeStamp] If the server supports Session Context linking, the server verifies that there is a Session Context state with the unique identifier in the ulIcxrLink parameter and the Session Context state has a creation time stamp equal to the value passed in this parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R557</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pulTimeStamp] If so [If the server supports Session Context linking, the server verifies that there is a Session Context state with the unique identifier ulIcxrLink and the server has a creation time stamp equal to the value passed in this parameter], the server MUST link the Session Context created by this [method EcDoConnectEx] call with the one found.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1517</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pulTimeStamp] If no such Session Context state is found, the server does not fail the EcDoConnectEx method call but simply does not link the Session Contexts.&lt;11&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1944, MS-OXCRPC_R1435.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R562</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pulTimeStamp] On output, the server has to return a time stamp in which the new Session Context was created.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R563</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pulTimeStamp] The server saves the Session Context creation time stamp within the Session Context state for later use if a client attempts to link Session Contexts.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R565</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] rgbAuxIn: An auxiliary payload buffer prefixed by an RPC_HEADER_EXT structure, as specified in section 2.2.2.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R566</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgbAuxIn] Information stored in this structure determines how to interpret the data that follows the structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R567</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgbAuxIn] The length of the auxiliary payload buffer that includes the RPC_HEADER_EXT structure is contained in the cbAuxIn parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1569</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgbAuxIn] For details about how to access the embedded auxiliary payload buffer, see section 3.1.4.1.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1570</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgbAuxIn] For details about how to interpret the auxiliary payload data, see section 3.1.4.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R570</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] cbAuxIn: The length of the rgbAuxIn parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R571</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [cbAuxIn] If this value on input is larger than 0x00001008 bytes in size, the server SHOULD&lt;12&gt; fail with the RPC status code RPC_X_BAD_STUB_DATA (0x000006F7).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirement: MS-OXCRPC_R4875.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1367</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [cbAuxIn] If this value is greater than 0x00000000 and less than 0x00000008, the server SHOULD&lt;13&gt; &lt;14&gt; fail with ecRpcFailed (0x80040115).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1436, MS-OXCRPC_R1940.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1571</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [cbAuxIn] For more information on returning RPC status codes, see [C706].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4839</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] rgbAuxOut: An auxiliary payload buffer prefixed by an RPC_HEADER_EXT structure (section 2.2.2.1).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R575.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R574</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] rgbAuxOut: On output, the server can return auxiliary payload data to the client in this parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R575</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgbAuxOut] The server MUST include an RPC_HEADER_EXT structure before the auxiliary payload data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1572</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgbAuxOut] For details about how to access the embedded auxiliary payload buffer, see section 3.1.4.1.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1573</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [rgbAuxOut] For details about how to interpret the auxiliary payload data, see section 3.1.4.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R578</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] pcbAuxOut: The length of the rgbAuxOut parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R579</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pcbAuxOut] If this value on input is larger than 0x00001008, the server MUST fail with the RPC status code RPC_X_BAD_STUB_DATA (0x000006F7).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R581</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [pcbAuxOut] On output, this parameter contains the size of the data to be returned in the rgbAuxOut parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R582</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] Return Values: If the method succeeds, the return value is 0.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1478</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] If the method fails, the return value is an implementation-specific error code.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R583</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] If the method fails, the return value is one of the protocol-defined error codes [ecRpcAuthentication(0x000004B6), ecNotEncrypted(0x00000970), ecClientVerDisallowed(0x000004DF), ecLoginFailure(0x80040111), ecUnknownUser(0x000003EB), ecLoginPerm(0x000003F2), ecVersionMismatch(0x80040110), ecCachedModeRequired(0x000004E1), ecRpcHttpDisallowed(0x000004E0), ecProtocolDisabled(0x000007D8)] listed in the following table [table in section 3.1.4.11].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1369</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Error Codes] [ecAccessDenied (0x80070005) means] The szUserDN parameter is empty.&lt;15&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R4887, MS-OXCRPC_R1437.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4888</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Error Codes] [ecAccessDenied (0x80070005) means] The authentication context associated with the binding handle does not have enough privilege.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R586</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecNotEncrypted (0x00000970)] The server is configured to require encryption and the authentication for the binding handle contained in the hBinding parameter is not set with RPC_C_AUTHN_LEVEL_PKT_PRIVACY.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1575</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecNotEncrypted (0x00000970)] For more information about setting the authentication and authorization, see [MSDN-RpcBindingSetAuthInfoEx].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R590</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecNotEncrypted (0x00000970)] The client attempts the call again with new binding handle that is encrypted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R591</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecClientVerDisallowed (0x000004DF)] The server requires encryption, but the client is not encrypted and the client does not support receiving error code ecNotEncrypted being returned by the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1576</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecClientVerDisallowed (0x000004DF)] For details about which client versions do not support receiving error code ecNotEncrypted, see section 3.1.4.1.3 and section 3.2.4.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R595</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecClientVerDisallowed (0x000004DF)] The client version has been blocked by the administrator.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R596</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecLoginFailure (0x80040111)] Server is unable to log in user to the mailbox or public folder database.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R600</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecUnknownUser (0x000003EB)] The server does not recognize the szUserDN parameter as a valid enabled mailbox.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1577</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecUnknownUser (0x000003EB)] For more details, see [MS-OXCSTOR] section 3.1.4.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R603</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecLoginPerm (0x000003F2)] The connection is requested for administrative access, but the authentication context associated with the binding handle does not have enough privilege.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R606</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecVersionMismatch (0x80040110)] The client and server versions are not compatible.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R608</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecVersionMismatch (0x80040110)] The client protocol version is earlier than that required by the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R609</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecCachedModeRequired (0x000004E1)] The server requires the client to be running in cache mode.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1578</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecCachedModeRequired (0x000004E1)] For details about which client versions understand this error code, see section 3.2.4.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R612</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecRpcHttpDisallowed (0x000004E0)] The server requires the client to not be connected via RPC over HTTP.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1579</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecRpcHttpDisallowed (0x000004E0)] For details about which client versions understand this error code, see section 3.1.4.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R615</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecProtocolDisabled (0x000007D8)] The server disallows the user to access the server via this protocol [MS-OXCRPC] interface.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R617</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecProtocolDisabled (0x000007D8)] This could be done if the user is only capable of accessing their mailbox information through a different means (for example, Webmail, POP, or IMAP).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1580</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] [Return Values] [ecProtocolDisabled (0x000007D8)] For details about which client versions understand this error code, see section 3.1.4.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R619</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoConnectEx Method (Opnum 10)] Exceptions Thrown: No exceptions are thrown beyond those thrown by the underlying RPC protocol, as specified in [MS-RPCE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R722</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] The EcDoConnectEx method contains request and response buffers that use an extended buffer mechanism where the payload is preceded by a header.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R747.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R725</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] The header contains the flags specified in section 2.2.2.1 that determine whether the payload has been compressed, determine whether the payload has been obfuscated, and determine whether another extended buffer and payload exist after the current payload.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R726</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] A single payload MUST NOT exceed 32 KB in size.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R727</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] An extended buffer is used in the rgbAuxIn and rgbAuxOut parameters on the EcDoConnectEx method as specified in section 3.1.4.1.1.1.1 and section 3.1.4.1.1.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R747.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R730</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The client can choose not to compress the payload if the payload is small enough that compression would not yield much benefit.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1479</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The server can choose not to compress the payload if the payload is small enough that compression would not yield much benefit.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R731</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The client can choose to not obfuscate the payload if the payload has already been compressed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1480</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The server can choose to not obfuscate the payload if the payload has already been compressed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R732</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The client can choose to not obfuscate the payload if the client is connected using RPC layer encryption.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R733</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The server can choose not to obfuscate the payload if the client is connected using RPC layer encryption.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1581</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] The extended buffer format, compression algorithm, obfuscation algorithm, and extended buffer packing for the EcDoConnectEx method are specified in section 3.1.4.1.1.1 through section 3.1.4.1.3 and their subsections.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R734</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The extended buffer format is used in the EcDoConnectEx method for the rgbAuxIn and rgbAuxOut parameters.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1583</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The way the extended buffer is used for the different fields in the EcDoConnectEx method is specified in section 3.1.4.1.1.1.1 and section 3.1.4.1.1.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R737</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] The rgbAuxIn parameter input buffer contains an RPC_HEADER_EXT structure, as specified in section 2.2.2.1, followed by payload data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4840</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] The RPC_HEADER_EXT structure provides information about the payload that follows it.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R738</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] The RPC_HEADER_EXT structure MUST contain the Last flag in the Flags field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R739</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] If the Compressed flag is present in the Flags field, the payload data MUST be compressed by the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R740</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] If the Compressed flag is present in the Flags field, the payload data MUST be uncompressed by the server before it can be interpreted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1584</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] For details about the compression algorithm, see section 3.1.4.1.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R742</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] If the XorMagic flag is present in the Flags field, the payload data MUST be obfuscated by the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R743</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] If the XorMagic flag is present in the Flags field, the payload data MUST be reverted by the server before it can be interpreted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1585</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] For details about the obfuscation algorithm, see section 3.1.4.1.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4841</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] If both the Compressed and XorMagic flags are present in the Flags field, the payload MUST first be compressed and then obfuscated by the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4842</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] [If both the Compressed and XorMagic flags are present in the Flags field, the payload MUST first be compressed and then obfuscated by the client, and then] MUST first be reverted and then uncompressed by the server before it can be interpreted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R745</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] The payload contains auxiliary information, specified in section 3.2.4.1.2, that can be passed from the client to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4843</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] The payload data contains an AUX_HEADER structure, as specified in section 2.2.2.2, followed by an auxiliary block structure as specified in the auxiliary block structure table.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R747</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] The rgbAuxOut parameter output buffer contains an RPC_HEADER_EXT structure, as specified in section 2.2.2.1, followed by payload data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4844</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] The RPC_HEADER_EXT structure provides information about the payload that follows it.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R748</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] The RPC_HEADER_EXT structure MUST contain the Last flag in the Flags field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R749</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] If the Compressed flag is present in the Flags field, the payload data MUST be compressed by the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R750</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] If the Compressed flag is present in the Flags field, the payload data MUST be uncompressed by the client before it can be interpreted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1587</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] For details about the compression algorithm, see section 3.1.4.1.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R752</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] If the XorMagic flag is present in the Flags field, the payload data MUST be obfuscated by the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R753</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] If the XorMagic flag is present in the Flags field, the payload data MUST be reverted by the client before it can be interpreted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1588</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] For details about the obfuscation algorithm, see section 3.1.4.1.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4845</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] If both the Compressed and XorMagic flags are present in the Flags field, the payload data MUST first be compressed and then obfuscated by the server</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4846</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] [If both the Compressed and XorMagic flags are present in the Flags field, the payload data MUST first be compressed and then obfuscated by the server and then] MUST first be reverted and then uncompressed by the client before it can be interpreted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R755</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] Payload data contains auxiliary information passed from the server to the client, as specified in section 3.1.4.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4847</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] The payload contains an AUX_HEADER structure, as specified in section 2.2.2.2, followed by an auxiliary block structure as specified in the auxiliary block structure table.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1770</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Compression Algorithm] Based on the Compressed flag in the Flags field that is passed in RPC_HEADER_EXT structure, as specified in section 2.2.2.1, of the extended buffer, the payload data is compressed by the client by using the Lempel-Ziv 1977 (LZ77) compression algorithm and the DIRECT2 encoding algorithm.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1483</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Compression Algorithm] Based on the Compressed flag in the Flags field that is passed in RPC_HEADER_EXT structure, as specified in section 2.2.2.1, of the extended buffer, the payload data is decompressed by the server by using the Lempel-Ziv 1977 (LZ77) compression algorithm and the DIRECT2 encoding algorithm.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R831</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Compression Algorithm] Based on the Compressed flag in the Flags field that is passed in RPC_HEADER_EXT structure, as specified in section 2.2.2.1, of the extended buffer, the payload data is compressed by the server by using the Lempel-Ziv 1977 (LZ77) compression algorithm and the DIRECT2 encoding algorithm.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1482</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Compression Algorithm] Based on the Compressed flag in the Flags field that is passed in RPC_HEADER_EXT structure, as specified in section 2.2.2.1, of the extended buffer, the payload data is decompressed by the client by using the Lempel-Ziv 1977 (LZ77) compression algorithm and the DIRECT2 encoding algorithm.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R833</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Compression Algorithm] The LZ77 compression algorithm is specified in section 3.1.4.1.1.2.1 and its subsections. The basic encoding algorithm DIRECT2 is specified in section 3.1.4.1.1.2.2 and its subsections.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R834</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In LZ77 Compression Algorithm] The LZ77 compression algorithm is used to analyze input data and determine how to reduce the size of that input data by replacing redundant information with metadata.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R835</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In LZ77 Compression Algorithm] Sections of the data that are identical to sections of the data that have been encoded are replaced by small metadata that indicates how to expand those sections again.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R836</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In LZ77 Compression Algorithm] The encoding algorithm is used to take that combination of data and metadata and serialize it into a stream of bytes that can later be decoded and decompressed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R837</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Compression Algorithm Terminology] The following terms [byte and window] are associated with the compression algorithm.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R839</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Compression Algorithm Terminology] byte: The basic data element in the input stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R842</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Compression Algorithm Terminology] window: A buffer that indicates the number of bytes from the coding position backward.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R843</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Compression Algorithm Terminology] [window] A window of size W contains the last W processed bytes.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R846</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Using the Compression Algorithm] To use the LZ77 compression algorithm: 1. Set the coding position to the beginning of the input stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R847</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Using the Compression Algorithm] 2. Find the longest match in the window for the lookahead buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R849</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Using the Compression Algorithm] 3. Output the P,C pair, where P is the pointer to the match in the window.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R850</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Using the Compression Algorithm] [3. Output the P,C pair, where P is the pointer to the match in the window] and C is the first byte in the lookahead buffer that does not match.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R851</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Using the Compression Algorithm] 4. If the lookahead buffer is not empty, move the coding position (and the window) L+1 bytes forward.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R852</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Using the Compression Algorithm] 5. Return to step 2 [Find the longest match in the window for the lookahead buffer].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R853</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process] The compression algorithm searches the window for the longest match with the beginning of the lookahead buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R854</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process, the compression algorithm searches the window for the longest match with the beginning of the lookahead buffer] and then outputs a pointer to that match.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R855</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process] Because even a 1-byte match might not be found, the output cannot contain only pointers.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R856</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process] The compression algorithm solves this problem [the output cannot contain only pointers] by outputting after the pointer the first byte in the lookahead buffer after the match.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R857</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process] If no match is found, the algorithm outputs a NULL pointer and the byte at the coding position.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1772</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] The following table [the first table in section 3.1.4.1.1.2.1.4] shows the input stream that is used for this compression example.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1773</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] The bytes in the input, "AABCBBABC," occupy the first nine positions of the stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1774</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] The output from the compression process is shown in the following table, which includes the following columns [Step, Pos, Match, Byte, Output].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R863</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] Step: Indicates the number of the encoding step.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R864</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] [Step] A step in the table finishes every time that the encoding algorithm makes an output.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R865</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] [Step] With the compression algorithm, this process happens in each pass through step 3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R866</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] Pos: Indicates the coding position.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R867</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] [Pos] The first byte in the input stream has the coding position 1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R868</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] Match: Shows the longest match found in the window.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R869</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] Byte: Shows the first byte in the lookahead buffer after the match.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R870</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] Output: Presents the output in the format (B,L)C, where (B,L) is the pointer (P) to the match.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R871</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] [Output] This gives the following instructions to the decoder: Go back B bytes in the window and copy L bytes to the output. C is the explicit byte.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R872</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] Note One or more pointers might be included before the explicit byte that is shown in the Byte column.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R873</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] The result of compression, conceptually, is the output column-that is, a series of bytes and optional metadata that indicates whether that byte is preceded by some sequence of bytes that is already in the output.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R874</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] Because representing the metadata itself requires bytes in the output stream, it is inefficient to represent a single byte that has previously been encoded by 2 bytes of metadata (offset and length).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R875</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] The overhead of the metadata bytes equals or exceeds the cost of outputting the bytes directly.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R876</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.1.4</ns1:Doc_Sect>
		<ns1:Description>[In Compression Process Example] Therefore, the server protocol only considers sequences of bytes to be a match if the sequences have 3 or more bytes in common.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R877</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In DIRECT2 Encoding Algorithm] The basic notion of the DIRECT2 encoding algorithm is that data appears unchanged in the compressed representation (it is not recommended to try to further compress the data by, for example, applying Huffman compression to that payload).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R878</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In DIRECT2 Encoding Algorithm] [The basic notion of the DIRECT2 encoding algorithm is that data appears unchanged in the compressed representation (it is not recommended to try to further compress the data by, for example, applying Huffman compression to that payload),] and metadata is encoded in the same output stream, and in line with, the data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R879</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In DIRECT2 Encoding Algorithm] The key to decoding the compressed data is recognizing what bytes are metadata.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R880</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In DIRECT2 Encoding Algorithm] The key to decoding the compressed data is recognizing what bytes are data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R881</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In DIRECT2 Encoding Algorithm] The decoder MUST be able to identify the presence of metadata in the compressed and encoded data stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R882</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In DIRECT2 Encoding Algorithm] To provide this information to the decoder, bitmasks are inserted periodically in the byte stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R883</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In DIRECT2 Encoding Algorithm] The bitmasks that enable the decoder to distinguish data from metadata.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R884</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In DIRECT2 Encoding Algorithm] The bitmasks that enable the decoder to distinguish the process of encoding the metadata are specified in section 3.1.4.1.1.2.2.1 through section 3.1.4.1.1.2.2.4.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R885</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] To distinguish data from metadata in the compressed byte stream, the data stream begins with a 4-byte bitmask that indicates to the decoder whether the next byte to be processed is data ("0" value in the bit).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R886</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] To distinguish data from metadata in the compressed byte stream, the data stream begins with a 4-byte bitmask that indicates to the decoder whether the next byte (or series of bytes) is metadata ("1" value in the bit).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R887</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] If a "0" bit is encountered, the next byte in the input stream is the next byte in the output stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R888</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] If a "1" bit is encountered, the next byte or series of bytes is metadata that MUST be interpreted further.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R889</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] For example, a bitmask of 0x01000000 indicates that the first seven bytes are actual data, followed by encoded metadata that starts at the eighth byte.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R890</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] The metadata is followed by 24 additional bytes of data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1873</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] The bitmask also contains a "1" in the bit following the last encoded element to indicate the end of the compressed data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1874</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] For example, given a hypothetical 8-bit bitmask, the string "ABCABCDEF" would be compressed as (0,0)A(0,0)B(0,0)C(3,3)D(0,0)E(0,0)F.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1875</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] Its bitmask would be b'00010001' (0x11).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1876</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] This would indicate 3 bytes of data, followed by metadata, followed by an additional 3 bytes, finally terminated with a "1" to indicate the end of the stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1877</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] The final end bit is necessary, even if an additional bitmask has to be allocated.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1878</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] If the string in the above example was "ABCABCDEFG", for example, it would require an additional bitmask.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1879</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] It would begin with the bitmask b'00010000', followed by the compressed data, and followed by another bitmask with a "1" as the next bit to indicate the end of the stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R891</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Bitmask] When the bitmask has been consumed, the next four bytes in the input stream are another bitmask.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R892</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Encoding Metadata] In the output stream, actual data bytes are stored unchanged.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R893</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Encoding Metadata] To indicate whether the next byte or bytes are data or metadata, bitmasks are stored periodically.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R894</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Encoding Metadata] If the next bit in the bitmask is "1", the next set of bytes in the input data stream is metadata.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R895</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Encoding Metadata] This metadata contains an offset back to the start of the data to be copied to the output stream, and the length of the data to be copied.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R896</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Encoding Metadata] To represent the metadata as efficiently as possible, the encoding of that metadata is not fixed in length.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R898</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Encoding Metadata] The encoding algorithm supports the largest possible floating compression window to increase the probability of finding a large match; the larger the window, the greater the number of bytes that are required for the offset.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R899</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Encoding Metadata] The encoding algorithm also supports the longest possible match; the longer the match length, the greater the number of bytes that are required to encode the length.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R901</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.3</ns1:Doc_Sect>
		<ns1:Description>[In Metadata Offset] This protocol [MS-OXCRPC] assumes the metadata is 2 bytes in length, where the high-order 13 bits are a first complement of the offset, and the low-order 3 bits are the length.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R902</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.3</ns1:Doc_Sect>
		<ns1:Description>[In Metadata Offset] The offset is only encoded with those 13 bits.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R903</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.3</ns1:Doc_Sect>
		<ns1:Description>[In Metadata Offset] This value [the offset] cannot be extended.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1252</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.3</ns1:Doc_Sect>
		<ns1:Description>[In Metadata Offset] This value [the offset] cannot be extended and defines the maximum size of the compression floating window.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R904</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.3</ns1:Doc_Sect>
		<ns1:Description>[In Metadata Offset] For example, the metadata 0x0018 is converted into the offset b'000000000011', and the length b'000'.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R905</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.3</ns1:Doc_Sect>
		<ns1:Description>[In Metadata Offset] In integers, the offset is '-4', computed by inverting the offset bits, treating the result as a 2s complement, and converting to integer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R906</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] Unlike the metadata offset, the match length is extensible.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R907</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] If the length is less than 10 bytes, it [the match length] is encoded in the 2 low-order bits of the 2-byte metadata.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R908</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] Although three bits seems to allow for a maximum length of 6 (the value b'111' is reserved), because the minimum match is 3 bytes, these 3 bits actually allow for the expression of lengths from 3 to 9.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R909</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] The match length goes from L = b'000' + 3 bytes, to L = b'110' + 3 bytes.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R910</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] Because smaller lengths are much more common than the larger lengths, the algorithm tries to optimize for smaller lengths.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R911</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] To encode a length between 3 and 9, we use the 3 bits that are "in-line" in the 2-byte metadata.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R912</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] If the length of the match is greater than 9 bytes, an initial bit pattern of b'111' is put in the 3 bits.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R913</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] This does not signify a length of 10 bytes, but instead a length that is greater than or equal to 10, which is included in the low-order nibble of the following byte.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R914</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] Every other time that the length is greater than 9, an additional byte follows the initial 2-byte metadata.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R915</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] The first time that the additional byte is included, the low-order nibble is used as the additive length.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R916</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] The next nibble is "reserved" for the next metadata instance when the length is greater than 9.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R917</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] Therefore, the first time that the decoder encounters a length that is greater than 9, it reads the next byte from the data stream and the low-order nibble is extracted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R918</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] Therefore, the first time that the decoder encounters a length that is greater than nine, the low-order nibble is extracted and used to compute length for this metadata instance.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R919</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] The high-order nibble is remembered and used the next time that the decoder encounters a metadata length that is greater than 9.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R920</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] The third time that a length that is greater than 9 is encountered, another extra byte is added after the 2-byte metadata, with the low-order nibble used for this length and the high-order nibble reserved for the fourth length that is greater than 9, and so on.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R921</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] If the nibble from this "shared" byte is all 1s (for example, b'1111'), another byte is added after the shared byte to hold more length.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R922</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length, in this manner, a length of 24 is encoded as follows:] b'111' (in the 3 bits in the original 2 bytes of metadata), plus b'1110' (in the nibble of the 'shared' byte of extended length).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R924</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length, in this manner, a length of 24 is encoded as follows:] b'111' means 10 bytes plus b'1110', which is 14, which results in a total of 24.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R925</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] If the length is more than 24, the next byte is also used in the length calculation.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R926</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length, in this manner, a length of 25 is encoded as follows:] b'111' (in the 3 bits in the original 2 bytes of metadata), plus b'1111' (in the nibble of the 'shared' byte of extended length), plus b'00000000' (in the next byte).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R929</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] This scheme [scheme in section 3.1.7.2.2.4] is good for lengths of up to 279 (a length of 10 in the 3 bits in the original 2 bytes of metadata, plus a length of 15 in the nibble of the 'shared' byte of extended length, plus a length of up to 254 in the extra byte).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R930</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] A "full" (all b'1') bit pattern (b'111', b'1111' and b'11111111') means that there is more length in the following 2 bytes.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R931</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] The final 2 bytes of length differ from the length information that comes earlier in the metadata.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R932</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] For lengths that are equal to 280 or greater, the length is calculated only from these last 2 bytes, and is not added to the previous length bits.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R933</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] The value in the last 2 bytes, a 16-bit integer, is 3 bytes less than the metadata length.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R934</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] These last 2 bytes allow for a match length of up to 32,768 bytes + 3 bytes (the minimum match length).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R935</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] The following table [table in section 3.1.4.1.1.2.2.4] summarizes the length representation in metadata.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R936</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] Note Length is computed from the bits that are included in the metadata plus the minimum match length of 3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R937</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] [Length representation in metadata] [The length bits in the metadata of match length "24" are represented in:]
"b'111' (3 bits in the original 2 bytes of metadata) + b'1110' (in the high or lower-order nibble, as appropriate, of the shared byte)".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R938</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] [Length representation in metadata] [The length bits in the metadata of match length "25" are represented in:] "b'111' (3 bits in the original 2 bytes of metadata) + b'1111' (in the high or lower-order nibble, as appropriate, of the shared byte) + b'00000000' (in the next byte)".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R939</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] [Length representation in metadata] [The length bits in the metadata of match length "26" are represented in:] "b'111' (3 bits in the original 2 bytes of metadata) + b'1111' (in the high or lower-order nibble, as appropriate, of the shared byte) + b'00000001' (in the next byte)".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R940</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] [Length representation in metadata] [The length bits in the metadata of match length "279" are represented in:] "b'111' (3 bits in the original 2 bytes of metadata) + b'1111' (in the high or lower-order nibble, as appropriate, of the shared byte) + b'11111110' (in the next byte)".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R941</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] [Length representation in metadata] The length bits in the metadata of match length "280" are represented in: b'111' (3 bits in the original 2 bytes of metadata) b'1111' (in the high or lower-order nibble, as appropriate, of the shared byte) b'11111111' (in the next byte) 0x0115 (in the next 2 bytes)".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R942</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] [Length representation in metadata] [The length bits in the metadata of match length "280" are as following:] These 2 bytes [0x0115] represent a length of 277 + 3 (minimum match length).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R943</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] [Length representation in metadata] [Match Length "280"] Note All the length is included in the final 2 bytes and is not additive, as were the previous length calculations for lengths that are smaller than 280 bytes.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R944</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] [Length representation in metadata] [The length bits in the metadata of match length "281" are represented in:] b'111' (3 bits in the original 2 bytes of metadata) b'1111' (in the high or lower-order nibble, as appropriate, of the shared byte) b'11111111' (in the next byte) 0x0116 (in the next two bytes)".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R945</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] [Length representation in metadata] [The length bits in the metadata of match length "281" are as following:] This is 278 [0X0116 represents] + 3 (minimum match length).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R946</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] [Length representation in metadata] [Match length "281"] Note All the length is included in the final 2 bytes and is not additive, as were the previous length calculations for lengths that are smaller than 280 bytes.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R947</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] A "full" bit pattern in that last half word does not mean that more metadata is coming after the last bytes.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R948</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] The LZ77 compression algorithm produces a well-compressed encoding for small valued lengths, but as the length increases, the encoding becomes less well compressed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R950</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length] A match length of greater than 278 bytes requires a relatively large number of bits: 3 + 4 + 8 + 16.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R951</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.2.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Match Length ] This [the match length] includes 3 bits in the original 2 bytes of metadata, 4 bits in the nibble in the 'shared' byte, 8 bits in the next byte, and 16 bits in the final 2 bytes of metadata.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R952</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Obfuscation Algorithm] Based on the XorMagic flag in the Flags field that is passed in the RPC_HEADER_EXT structure, as specified in section 2.2.2.1, of the extended buffer, the payload data specified in section 3.1.4.1.1.1.1 and section 3.1.4.1.1.1.2 is obfuscated to obscure any easily readable messaging data being transmitted between the client and server across the network.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R953</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Obfuscation Algorithm] This [obfuscation] is not intended as a security feature.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R954</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Obfuscation Algorithm] If a client requests to have secure communications with the server, it [the client] MUST use RPC-level packet encryption.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R955</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Obfuscation Algorithm] The algorithm used to obscure data is straightforward and simple.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R956</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Obfuscation Algorithm] Every byte of the data to be obfuscated has the XOR operator applied with the value 0xA5.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1591</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The EcDoConnectEx method allows for additional data to travel between the server and the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R581, MS-OXCRPC_R574, MS-OXCRPC_R1061, MS-OXCRPC_R990, MS-OXCRPC_R1597, MS-OXCRPC_R993, MS-OXCRPC_R55, MS-OXCRPC_R1692, MS-OXCRPC_R1438, MS-OXCRPC_R1521, MS-OXCRPC_R1839,  MS-OXCRPC_R1535, MS-OXCRPC_R1540, MS-OXCRPC_R1539, MS-OXCRPC_R1060.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1592</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] This additional data [additional data travels between the server and the client] is transferred in the auxiliary buffers of the method [EcDoConnectEx].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4848</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The rgbAuxIn parameter payload, as specified in in section 3.1.4.1.1.1.1, is for auxiliary data being sent from the client to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1593</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The rgbAuxOut parameter payload, as specified in section 3.1.4.1.1.1.2, is for auxiliary data being sent from the server to the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1594</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] Unlike the ROP request and ROP response payloads in the rgbIn and rgbOut parameters, there is no request and response nature to the auxiliary buffers.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1595</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The data sent from the server to the client is informational data that the client might use to alter its [client] behavior against the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1596</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The data being transferred from the server to the client enables the server to tell the client about topology characteristics of the messaging system.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1597</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] All information in the auxiliary buffer MUST be added with an AUX_HEADER structure preceding the actual auxiliary information.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1598</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] For details about the AUX_HEADER and how it is formatted, see section 2.2.2.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1599</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] Within the AUX_HEADER structure, the Version and Type fields combined determine which auxiliary block structure follows the AUX_HEADER structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1600</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] Details about how to format the AUX_HEADER structure to indicate which auxiliary block follows are provided in section 2.2.2.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1601</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] If the server receives an AUX_HEADER auxiliary block with a version and type it does not recognize (that is, does not support), it MUST skip over the entire block without throwing an error.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1602</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The AUX_HEADER structure contains the length of the AUX_HEADER plus the following auxiliary block structure in the Size field, so the information can be skipped.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R46.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1060</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] The auxiliary blocks [AUX_CLIENT_CONTROL, AUX_OSVERSIONINFO, AUX_EXORGINFO and AUX_EXORGINFO] sent from the server to the client in the rgbAuxOut parameter auxiliary buffer on the EcDoConnectEx method to provide server topology information are described in the following table.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1061</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] Each of these auxiliary blocks [AUX_CLIENT_CONTROL, AUX_OSVERSIONINFO, AUX_EXORGINFO and AUX_SERVER_SESSION_INFO] MUST be preceded by a properly formatted AUX_HEADER structure, as specified in section 2.2.2.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1062</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] AUX_CLIENT_CONTROL: Sent to the client to request a change in client behavior.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1063</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] [AUX_CLIENT_CONTROL] This [AUX_CLIENT_CONTROL] is a means for the server to dynamically change client behavior.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1603</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] [AUX_CLIENT_CONTROL] For details about what client behavior the server can adjust, see section 2.2.2.2.15.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1064</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] [AUX_CLIENT_CONTROL] The client alters its [client's] behavior based on this request.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1065</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] AUX_OSVERSIONINFO: Sent to the client as informational data to help the client decide whether it [the client] needs to alter its [client's] behavior against the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R272, MS-OXCRPC_R273, MS-OXCRPC_R274, MS-OXCRPC_R275, MS-OXCRPC_R278, MS-OXCRPC_R279.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1066</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] [AUX_OSVERSIONINFO] The data provided to the client is the server's operating system version and operating system service pack information.&lt;16&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1438, MS-OXCRPC_R1918.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1068</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] AUX_EXORGINFO: Sent to the client as informational data to help the client decide whether it [client] needs to alter its [client's] behavior against the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R283.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1069</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] [AUX_EXORGINFO] The data provided informs the client of the presence of public folders within the organization.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R283.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1070</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] [AUX_EXORGINFO] A client MUST NOT try to open a public message store if the server informs the client that it is not present or disabled.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1071</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] [AUX_EXORGINFO] If this block [AUX_EXORGINFO] is not returned to the client, the client assumes that public folders are available within the organization.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1590</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] AUX_SERVER_SESSION_INFO: Sent by the server to the client as server information data to be logged by the client.&lt;17&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R1535, MS-OXCRPC_R1539, MS-OXCRPC_R1540.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1880</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] This information [AUX_PROTOCOL_DEVICE_IDENTIFICATION] is returned to the client as diagnostic information by any device or system operating between the client and the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1604</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Auxiliary buffers received from the client can contain reserved fields that are inserted in the buffer as padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1605</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] The server MUST ignore the value of these fields [Reserved field in structures AUX_PERF_SESSIONINFO, AUX_PERF_SESSIONINFO_V2, AUX_PERF_CLIENTINFO, AUX_PERF_PROCESSINFO and AUX_CLIENT_CONNECTION_INFO] when reading the stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Partially verified by derived requirements: MS-OXCRPC_R1819, MS-OXCRPC_R1820, MS-OXCRPC_R1821, MS-OXCRPC_R1822, MS-OXCRPC_R1823, MS-OXCRPC_R1824.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1819</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the reserved field in structure AUX_PERF_SESSIONINFO.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1605:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1820</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the reserved field in structure AUX_PERF_SESSIONINFO_V2.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1605:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1821</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the reserved field in structure AUX_PERF_CLIENTINFO.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1605:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1822</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the Reserved_1 field in structure AUX_PERF_PROCESSINFO.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1605:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1823</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the Reserved_2 field in structure AUX_PERF_PROCESSINFO.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1605:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1824</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the reserved field in structure AUX_CLIENT_CONNECTION_INFO.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1605:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1606</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] The data sent to the server from the client in the auxiliary input buffer is purely informational</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1607</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] [The data sent to the server from the client in the auxiliary input buffer is purely informational,] the server is not required to respond in the auxiliary output buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1078</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Version Checking] When the server receives the client version in the EcDoConnectEx method, the server returns its [server's] version to the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1079</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Version Checking] The server version information indicates what functionality is supported on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1085</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] On the wire, version numbers are passed as three WORD values, as specified in [MS-DTYP].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R1097.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1086</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] In the EcDoConnectEx method, as specified in section 3.1.4.1, the rgwClientVersion, rgwServerVersion, and rgwBestVersion parameters are each passed as three WORD values.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1093</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] Version numbers are now expressed in the format "XX.XX.XXXX.XXX".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1094</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] For example, "08.01.0215.000" represents a specific server build.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1095</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] The first number is the product major version.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1841</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] The second number is the product minor version.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1259</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] The third number is the build major number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1260</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] The fourth number is the build minor number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1097</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] In order to make version comparisons, a three-WORD value version number (as transmitted over the wire) is converted into a four-WORD value version number.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1098</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] A scheme, referred to a version number normalization, was devised that converts from the three-WORD on-the-wire format of the version into a four-number version.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1100</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] All received version parameters are converted into four-number versions before any version checks are performed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1844</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] A function that converts the three-WORD value wire version format into a four-number (four-WORD) format that can then be used for version comparisons is described in the following pseudocode example.
// This routine converts a three-WORD version value into a normalized
// four-WORD version value.
//
// Version[] is an array of 3 WORD values on the wire.
// NormalizedVersion[] is an array of 4 WORD values for comparison.
//

IF high-bit of Version[1]is set THEN
    SET NormalizedVersion[0] to high-byte of Version[0]
    SET NormalizedVersion[1] to low-byte of Version[0]
    SET NormalizedVersion[2] to Version[1] with high-bit cleared
    SET NormalizedVersion[3] to Version[2]

ELSE
    SET NormalizedVersion[0] to Version[0]
    SET NormalizedVersion[1] to 0
    SET NormalizedVersion[2] to Version[1]
    SET NormalizedVersion[3] to Version[2]
ENDIF</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1102</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] The first WORD of the three-WORD version number is divided into two BYTE values, as specified in [MS-DTYP], one being the product major version and the other being the product minor version.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1103</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] On the wire, the client MUST determine whether the version that is being passed is in the old scheme or the new scheme.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1838</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] On the wire, the server MUST determine whether the version that is being passed is in the old scheme or the new scheme.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1104</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] If the highest bit of the second WORD value on the wire is set, the version on the wire is in the new scheme.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1105</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] Otherwise [if the highest bit of the second WORD value on the wire is not set], it [the version on the wire] is interpreted as the old scheme where the product minor version is not sent.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1112</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] A server implementation determines which level of support it [the server] will offer clients.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1113</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] Based on this level [level of support the server will offer clients] of support, it [the server] MUST return a server version that corresponds to that support.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1114</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] A server cannot mix and match functionality.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1115</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] To support functionality at a given server version level, the server MUST support all functionality from previous server version levels.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1315</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] The server version values [6.0.67550, 8.0.295.0, 8.0.324.0, 8.0.358.0, 8.1.92.0, 14.0.324.0, 14.0.616.0, 14.1.67.0, 15.0.466.0] that are returned to the client on the EcDoConnectEx method call are shown in the following table [table in section 3.1.4.11.3.2].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1108</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] [Server version "6.0.6755.0":] The server supports passing the sentinel value 0xBABE in the BufferSize field of a RopFastTransferSourceGetBuffer ROP request ([MS-OXCROPS] section 2.2.12.4).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1881</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] This is the minimum server version returned to the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1109</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] [Server version "8.0.295.0":] The server supports passing the sentinel value 0xBABE in the ByteCount field of a RopReadStream ROP request ([MS-OXCROPS] section 2.2.9.2).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1110</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] [Server version "8.0.324.0":] The server supports the USE_PER_MDB_REPLID_MAPPING (0x01000000) flag in the OpenFlags field of a RopLogon ROP request ([MS-OXCROPS] section 2.2.3.1).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1111</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] [Server version "8.0.358.0":] The server supports the EcDoAsyncConnectEx and EcDoAsyncWaitEx RPC methods.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1111001</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] [Server version "8.1.92.0":] The server supports RopFastTransferDestinationPutBufferExtended ROP ([MS-OXCROPS] section 2.2.12.3).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1405</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] [Server version "14.0.324.0":] The server supports passing the ConversationMembers flag (0x80) in the TableFlags field of a RopGetContentsTable ROP request ([MS-OXCROPS] section 2.2.4.14).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1406</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] [Server version "14.0.616.0":] The server supports passing the HardDelete flag (0x02) in the ImportDeleteFlags field of a RopSynchronizationImportDeletes ROP request ([MS-OXCROPS] section 2.2.13.5).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1407</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] [Server version "14.1.67.0":] The server supports passing the FailOnConflict flag (0x40) in the ImportFlag field of a RopSynchronizationImportMessageChange ROP request ([MS-OXCROPS] section 2.2.13.2).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1111002</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Server Versions] [Server version "15.0.466.0":] The server supports RopWriteStreamExtended ROP ([MS-OXCROPS] section 2.2.9.4).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1290</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] The EcDoRpcExt2 method passes generic ROP commands to the server for processing within a Session Context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1291</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] Each call can contain multiple ROP commands.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R621</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] The server returns the results of each ROP command to the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R622</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] This [method EcDoRpcExt2] call requires an active session context handle returned from the EcDoConnectEx method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R623</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] pcxh: On input, the client MUST pass a valid session context handle that was created by calling the EcDoConnectEx method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R624</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcxh] The server uses the session context handle to identify the Session Context to use for this [method EcDoRpcExt2] call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R625</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcxh] On output, the server MUST return the same session context handle on success.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R626</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcxh] The server can destroy the session context handle by returning a zero session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1372</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcxh] Reasons for destroying the session context handle are implementation-dependent.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R628</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcxh] following are examples of why the server might destroy the session context handle: the server determines that the ROP request payload in the rgbIn buffer is malformed or length parameters are invalid.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R629</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcxh] following are examples of why the server might destroy the session context handle: the session context handle that was passed in is not valid.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R630</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcxh] following are examples of why the server might destroy the Session CXH: An attempt was made to access a mailbox that is in the process of being moved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R631</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcxh] following are examples of why the server might destroy the Session CXH: An administrator has blocked a client that has an active connection.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4849</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] pulFlags: The flags that describe the server output characteristics.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R634, MS-OXCRPC_R638, MS-OXCRPC_R642.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R632</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] pulFlags: On input, this parameter contains flags [NoCompression (0x00000001), NoXorMagic (0x00000002), Chain (0x00000004)] that tell the server how to build the rgbOut parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R634</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pulFlags] If pulFlags contains NoCompression (0x00000001), the server MUST NOT compress ROP response payload (rgbOut).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1304</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] If pulFlags contains NoCompression (0x00000001), the server MUST NOT compress auxiliary payload (rgbAuxOut).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1609</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pulFlags] For details about server behavior when this flag [NoCompression] is absent, see section 3.1.4.2.1.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R638</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pulFlags] If pulFlags contains NoXorMagic (0x00000002), the server MUST NOT obfuscate the ROP response payload (rgbOut).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1305</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pulFlags] If pulFlags contains NoXorMagic (0x00000002), the server MUST NOT obfuscate the auxiliary payload (rgbAuxOut).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1610</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pulFlags] For details about server behavior when this flag [NoXorMagic] is absent, see section 3.1.4.2.1.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R642</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pulFlags] If pulFlags contains Chain (0x00000004), the client allows chaining of ROP response payloads.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1611</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pulFlags] For details about how to use these flags [NoCompression, NoXorMagic and Chain], see section 3.1.4.2.1.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R644</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pulFlags] On output, the server  SHOULD&lt;18&gt; set this parameter to 0x00000000.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1899, MS-OXCRPC_R1934.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R645</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pulFlags] The output flags not in the table are reserved for future use.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R646</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] rgbIn: The ROP request payload.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R647</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbIn] The ROP request payload is prefixed with an RPC_HEADER_EXT header, as specified in section 2.2.2.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R648</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbIn] Information stored in this header determines how to interpret the data following the header.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1612</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbIn] For details about how to access the embedded ROP request payload, see section 3.1.4.2.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R650</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbIn] The length of the ROP request payload including the RPC_HEADER_EXT header is contained in the cbIn parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1613</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbIn] For more information about ROP buffers, see [MS-OXCROPS].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4850</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] cbIn: The length of the ROP request payload.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R652</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] cbIn: On input, this parameter contains the length of the ROP request payload passed in the rgbIn parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R655</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [cbIn] The ROP request payload includes the size of the ROPs plus the size of the RPC_HEADER_EXT structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1373</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [cbIn] The server SHOULD&lt;19&gt; fail with the RPC status code of RPC_X_BAD_STUB_DATA (0x000006F7) if the request buffer is larger than 0x00040000 bytes in size.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1374, MS-OXCRPC_R2001, MS-OXCRPC_R1939.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1614</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [cbIn] For more information on returning RPC status codes, see [C706].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1379</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [cbIn] If the request buffer is smaller than the size of the RPC_HEADER_EXT structure (0x00000008 bytes), the server SHOULD&lt;20&gt; fail with error code ecRpcFailed (0x80040115).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1900, MS-OXCRPC_R1508.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R657</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] rgbOut: The ROP response payload.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1320</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbOut] The size of the payload is specified in the pcbOut parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R658</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbOut] Like the ROP request payload, the ROP response payload is also prefixed by a RPC_HEADER_EXT header.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1615</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbOut] For details about how to format the ROP response payload, see section 3.1.4.2.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R660</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbOut] The size of the ROP response payload plus the RPC_HEADER_EXT header is returned in the pcbOut parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4851</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] pcbOut: The maximum size of the rgbOut parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Partially verified by derived requirement: MS-OXCRPC_R4852.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4852</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] The size of the rgbOut parameter is less than or equal to pcbOut field.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R4851:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R662</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] pcbOut: On input, this parameter contains the maximum size of the rgbOut parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R663</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcbOut] If the value in the pcbOut parameter on input is less than 0x00000008, the server SHOULD&lt;21&gt; fail with error code ecRpcFailed (0x80040115).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R664, MS-OXCRPC_R1924, MS-OXCRPC_R2002.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R666</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcbOut] If the value in the pcbOut parameter on input is larger than 0x00040000, the server MUST fail with the RPC status code of RPC_X_BAD_STUB_DATA (0x000006F7).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R666001</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcbOut] If the server indicates it supports a larger ROP response payload through the ULTRA_LARGE_PACKED_DOWNLOAD_BUFFERS flag being present in the Flags field of the AUX_SERVER_CAPABILITIES (section 2.2.2.2.19) auxiliary block returned in rgbAuxOut field of the EcDoConnectEx method (section 3.1.4.1), then the server MUST fail only if pcbOut is larger than 0x00100000.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R668</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcbOut] On output, this parameter contains the size of the ROP response payload, including the size of the RPC_HEADER_EXT header in the rgbOut parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R669</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcbOut] The server returns 0x00000000 on failure because there is no ROP response payload.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R670</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcbOut] The client ignores any data returned on failure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R671</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] rgbAuxIn: The auxiliary payload buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R672</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbAuxIn] The auxiliary payload buffer is prefixed by an RPC_HEADER_EXT structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R673</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbAuxIn] Information stored in this header determines how to interpret the data following the header.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R674</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbAuxIn] The length of the auxiliary payload buffer including the RPC_HEADER_EXT header is contained in the cbAuxIn parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1618</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbAuxIn] For details about how to access the embedded auxiliary payload buffer, see section 3.1.4.2.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1882</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)]  [rgbAuxIn] For details about how to interpret the auxiliary payload data, see section 3.1.4.2.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4853</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] cbAuxIn: The length of the auxiliary payload buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1883</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)]  cbAuxIn: On input, this parameter contains the length of the auxiliary payload buffer passed in the rgbAuxIn parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R678</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)]  [cbAuxIn] If the request buffer value is larger than 0x00001008 bytes in size, the server SHOULD&lt;22&gt; fail with the RPC status code RPC_X_BAD_STUB_DATA (0x000006F7).&lt;23&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R4877, MS-OXCRPC_R1381.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4854</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] rgbAuxOut: The auxiliary payload buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R681</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] rgbAuxOut: On output, the server MAY&lt;24&gt; return auxiliary payload data to the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1403, MS-OXCRPC_R1926.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R682</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [rgbAuxOut] The server MUST include a RPC_HEADER_EXT header before the auxiliary payload data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4855</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] pcbAuxOut: The maximum length of the auxiliary payload buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Partially verified by derived requirement: MS-OXCRPC_R4856.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4856</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] The length of the auxiliary payload buffer is less than or equal to pcbAuxOut field.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R4855:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R677</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] pcbAuxOut: On input, this parameter contains the maximum length of the rgbAuxOut parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R686</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcbAuxOut] If this value on input is larger than 0x00001008, the server MUST fail with the RPC status code RPC_X_BAD_STUB_DATA (0x000006F7).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R688</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pcbAuxOut] On output, this parameter contains the size of the data to be returned in the rgbAuxOut parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4857</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] pulTransTime: The time it took to execute this method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R689</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] pulTransTime: On output, the server stores the number of milliseconds the call took to execute.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R690</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pulTransTime] This [pulTransTime] is the total elapsed time from when the call is dispatched on the server to the point in which the server returns the call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R691</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pulTransTime] This [pulTransTime] is diagnostic information the client can use to determine the cause of a slow response time from the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R692</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [pulTransTime] The client can monitor the total elapsed time across the RPC method call and, using this output parameter, can determine whether time was spent transmitting the request/response on the network or processing it on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R694</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] Return Values: If the method succeeds, the return value is 0.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1385</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [Return Values] If the method fails, the return value is an implementation-specific error code.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1278</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [Return Values] If the method fails, [the return value is an implementation-specific error code OR] the return value is the protocol-defined error code [ecRpcFormat (0x000004B6)] listed in the following table.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R697</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [Return Values] [ecRpcFormat (0x000004B6)] The format of the request was found to be invalid.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R698</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] [Return Values] [ecRpcFormat (0x000004B6)] This [ecRpcFormat] is a generic error that means the length was found to be invalid or the content was found to be invalid.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R699</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2</ns1:Doc_Sect>
		<ns1:Description>[In EcDoRpcExt2 Method (opnum 11)] Exceptions Thrown: No exceptions are thrown beyond those thrown by the underlying RPC protocol as specified in [MS-RPCE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1624</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] The EcDoRpcExt2 method, as specified in section 3.1.4.2, contains request and response buffers that use an extended buffer mechanism where the payload is preceded by a header.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R775, MS-OXCRPC_R1649.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1625</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] The header contains the flags specified in section 2.2.2.1 that determine whether the payload has been compressed, determine whether the payload has been obfuscated, and determine whether another extended buffer and payload exist after the current payload.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1628</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] A single payload MUST NOT exceed 32 KB in size.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1629</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] An extended buffer is used in the rgbIn, rgbOut, rgbAuxIn, and rgbAuxOut parameters on the EcDoRpcExt2 method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R775, MS-OXCRPC_R1649.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1630</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] For specification of the compression algorithm used in compressing an extended buffer, see section 3.1.4.1.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1631</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] For specification of the obfuscation algorithm used to obscure readable messaging content in an extended buffer, see section 3.1.4.1.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1632</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] The extended buffer format and extended buffer packing are specified in section 3.1.4.2.1.1 and section 3.1.4.2.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1634</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The client can choose not to compress the payload if the payload is small enough that compression would not yield much benefit.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1635</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The server can choose not to compress the payload if the payload is small enough that compression would not yield much benefit.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1636</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The client can choose to not obfuscate the payload if the payload has already been compressed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1637</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The server can choose to not obfuscate the payload if the payload has already been compressed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1638</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The client can choose to not obfuscate the payload if the client is connected using RPC layer encryption.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1639</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The server can choose to not obfuscate the payload if the client is connected using RPC layer encryption.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4858</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] These options are specified in the Flags field of the RPC_HEADER_EXT structure in section 2.2.2.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R36, MS-OXCRPC_R39, MS-OXCRPC_R40.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1640</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The extended buffer is used in the EcDoRpcExt2 method, as specified in section 3.1.4.2, for a variety of different fields.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R780, MS-OXCRPC_R783.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1641</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Format] The information in section 3.1.4.2.1.1.1 through section 3.1.4.2.1.1.4 describes how the extended buffer is used for the different parameters in this method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1641001</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer]The rgbIn parameter input buffer can contain multiple extended buffers in a single input buffer. </ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1775</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] Each of the extended buffers contains an RPC_HEADER_EXT structure, as specified in section 2.2.2.1, followed by payloadPayload data. </ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1775001</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] A client MUST NOT send multiple extended buffers in the input buffer, if the server does not indicate it supports extended buffer packing through the AUX_SERVER_CAPABILITIES auxiliary buffer, as specified in section 2.2.2.2.19, returned in the rgbAuxOut parameter of the EcDoConnectEx method, as specified in section 3.1.4.1.1.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1775002</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer]All RPC_HEADER_EXT structures in the input buffer except for the last MUST NOT contain the Last flag in the Flags field of the RPC_HEADER_EXT structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R766</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] The last RPC_HEADER_EXT structure in the input buffer MUST contain the Last flag in its Flags field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R767</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] If the Compressed flag is present in the Flags field of the RPC_HEADER_EXT structure, the payload data MUST be compressed by the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R768</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] If the Compressed flag is present in the Flags field of the RPC_HEADER_EXT structure, the content of the payload MUST be uncompressed by the server before it can be interpreted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1642</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] For details about the compression algorithm, see section 3.1.4.1.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R770</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] If the XorMagic flag is present in the Flags field of the RPC_HEADER_EXT structure, the payload data MUST be obfuscated by the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R771</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] If the XorMagic flag is present in the Flags field of the RPC_HEADER_EXT structure, the payload MUST be reverted by the server before it can be interpreted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1643</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] For details about the obfuscation algorithm, see section 3.1.4.1.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4859</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] If both the Compressed and XorMagic flags are present in the Flags field of the RPC_HEADER_EXT structure the payload data MUST first be compressed and then obfuscated by the client,</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4860</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] [If both the Compressed and XorMagic flags are present in the Flags field of the RPC_HEADER_EXT structure the payload data MUST first be compressed and then obfuscated by the client, and then] MUST first be reverted and then uncompressed by the server before it can be interpreted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R773</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] The payload data is ROP request information that can be passed from the client to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1644</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] For details about how to interpret this data [rgbIn], see [MS-OXCROPS].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R775</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] The rgbOut parameter output buffer can contain multiple extended buffers in a single output buffer. Each of the extended buffers contains an RPC_HEADER_EXT structure, as specified in section 2.2.2.1, followed by Payload data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R777</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] Each of the extended buffers contains an RPC_HEADER_EXT structure, as specified in section 2.2.2.1, followed by Payload data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R778</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] All RPC_HEADER_EXT structures in the output buffer except for the last MUST NOT contain the Last flag in the Flags field of the RPC_HEADER_EXT structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R779</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] The last RPC_HEADER_EXT structure in the output buffer MUST contain the Last flag in its Flags field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R780</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] If the Compressed flag is present in the Flags field of an RPC_HEADER_EXT structure, the payload data associated with that RPC_HEADER_EXT structure MUST be compressed by the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R781</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] If the Compressed flag is present in the Flags field of an RPC_HEADER_EXT structure, the payload data MUST be uncompressed by the client before it can be interpreted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1645</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] For details about the compression algorithm, see section 3.1.4.1.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R783</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] If the XorMagic flag is present in the Flags field of an RPC_HEADER_EXT structure, the payload data associated with that RPC_HEADER_EXT structure MUST be obfuscated by the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R784</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] If the XorMagic flag is present in the Flags field of an RPC_HEADER_EXT structure, the payload data MUST be reverted by the client before it can be interpreted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1646</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] For details about the obfuscation algorithm, see section 3.1.4.1.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4861</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] If both the Compressed and XorMagic flags are present in the Flags field of an RPC_HEADER_EXT structure, the payload data associated with that RPC_HEADER_EXT structure MUST first be compressed and then obfuscated by the server</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4862</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] [If both the Compressed and XorMagic flags are present in the Flags field of an RPC_HEADER_EXT structure, the payload data associated with that RPC_HEADER_EXT structure MUST first be compressed and then obfuscated by the server, and then] MUST first be reverted and then uncompressed by the client before it can be interpreted.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R786</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] Compression or obfuscation can be done differently for each RPC_HEADER_EXT structure and its related payload data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R36, MS-OXCRPC_R39.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R787</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] The server MUST be able to treat each RPC_HEADER_EXT structure and payload data combination independently and interpret the contents solely on the flags specified in the associated RPC_HEADER_EXT structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R790</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] Each payload contains ROP response information that is returned from the server to the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R780, MS-OXCRPC_R783.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1647</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] For details about how to interpret this data [remote operation (ROP) response information], see [MS-OXCROPS].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1648</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.3</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxIn Input Buffer] The format of the rgbAuxIn parameter input buffer for the EcDoRpcExt2 method, as specified in section 3.1.4.2, is the same as that of the rgbAuxIn parameter input buffer for the EcDoConnectEx method, as specified in section 3.1.4.1.1.1.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.1.4</ns1:Doc_Sect>
		<ns1:Description>[In rgbAuxOut Output Buffer] The format of the rgbAuxOut parameter input buffer for the EcDoRpcExt2 method, as specified in section 3.1.4.2, is the same as that of the rgbAuxOut parameter input buffer for the EcDoConnectEx method, as specified in section 3.1.4.1.1.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649001</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] As mentioned in section 3.1.4.2.1.1.1, the rgbIn parameter of the EcDoRpcExt2 method, as specified in section 3.1.4.2, can contain more than one extended buffer, each with an RPC_HEADER_EXT structure, as specified in section 2.2.2.1. </ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649002</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] This concept is called packing. </ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649003</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] The client has the ability to pack additional request data into the rgbIn parameter based on whether the server has indicated it supports packing through the presence of flag PACKED_FAST_TRANSFER_UPLOAD_BUFFERS in the ServerCapabilityFlags field of the  AUX_SERVER_CAPABILITIES auxiliary buffer, as specified in section 2.2.2.2.19, returned in the rgbAuxOut parameter of the EcDoConnectEx method, as specified in section 3.1.4.1.1.1.2. </ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649004</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] The client has the ability to pack additional request data into the rgbIn parameter based on whether the server has indicated it supports packing through the presence of flag PACKED_WRITE_STREAM_UPLOAD_BUFFERS in the ServerCapabilityFlags field of the  AUX_SERVER_CAPABILITIES auxiliary buffer, as specified in section 2.2.2.2.19, returned in the rgbAuxOut parameter of the EcDoConnectEx method, as specified in section 3.1.4.1.1.1.2. </ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649005</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] The ROP commands that support packing are the RopWriteStreamExtended ROP ([MS-OXCROPS] section 2.2.9.4) if PACKED_WRITE_STREAM_UPLOAD_BUFFERS is indicated as a server capability, </ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649006</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] The ROP commands that support packing are the RopFastTransferDestinationPutBuffer ROP ([MS-OXCROPS] section 2.2.12.2) and RopFastTransferDestinationPutBufferExtended ROP ([MS-OXCROPS] section 2.2.12.3) if PACKED_FAST_TRANSFER_UPLOAD_BUFFERS is indicated.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649007</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] Each extended buffer MUST NOT contain more than 32 KB worth of request data for all ROP requests.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649008</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] When processing ROP requests, the server MUST only allow a single RopWriteStreamExtended ROP ([MS-OXCROPS] section 2.2.9.4), a single RopFastTransferDestinationPutBuffer ROP ([MS-OXCROPS] section 2.2.12.2), or a single RopFastTransferDestinationPutBufferExtended ROP ([MS-OXCROPS] section 2.2.12.3) to be present in each subsequent packed extended buffers where the last ROP in the first extended buffer of the input buffer is a corresponding RopWriteStreamExtended ROP, RopFastTransferDestinationPutBuffer ROP, or RopFastTransferDestinationPutBufferExtended ROP.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649009</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer]The server MUST aggregate all packed request data into a single combined RopWriteStreamExtended ROP ([MS-OXCROPS] section 2.2.9.4), RopFastTransferDestinationPutBuffer ROP ([MS-OXCROPS] section 2.2.12.2) or RopFastTransferDestinationPutBufferExtended ROP ([MS-OXCROPS] section 2.2.12.3) request and process it as though it was sent as the last ROP of the first extended buffer in the rgbIn parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649010</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] The result of the aggregated ROP request MUST be returned in the first extended buffer in the rgbOut parameter of the EcDoRpcExt2 method, as specified in section 3.1.4.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R1649011, MS-OXCRPC_R1649012 and MS-OXCRPC_R1649013</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649011</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] For the RopWriteStreamExtended ROP, the server MUST return in the WrittenSize field of the RopWriteStreamExtended ROP ([MS-OXCROPS] section 2.2.9.4) response the combined amount of data written to the stream across all of the packed RopWriteStreamExtended ROP request operations.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649012</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] For the RopFastTransferDestinationPutBuffer ROP, the server MUST return in the BufferUsedSize field of the RopFastTransferDesintationPutBuffer ROP ([MS-OXCROPS] section 2.2.12.2) response the amount of the buffer used in the last RopFastTransferDestinationPutBuffer ROP in the packed extended buffers.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1649013</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In rgbIn Input Buffer] For the RopFastTransferDestinationPutBufferExtended ROP, the server MUST return in the BufferUsedSize field of the RopFastTransferDesintationPutBufferExtended ROP ([MS-OXCROPS] section 2.2.12.3) response the amount of the buffer used in the last RopFastTransferDestinationPutBufferExtended ROP in the packed extended buffers.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R957</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] The format of the the rgbAuxOut parameter input buffer for the EcDoRpcExt2 method, as specified in section 3.1.4.2, is the same as that of the rgbAuxOut parameter input buffer for the EcDoConnectEx method, as specified in section 3.1.4.1.1.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R958</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] This concept [Extended Buffer Packing] is called packing.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R959</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] The server has the ability to "pack" additional response data into the rgbOut parameter based on whether the client has requested this functionality through passing the Chain flag in the pulFlags parameter and whether the ROP in the rgbIn request on the EcDoRpcExt2 method supports packing.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R962.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R960</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] The ROP commands that support packing are the RopQueryRows ROP ([MS-OXCROPS] section 2.2.5.4), the RopReadStream ROP ([MS-OXCROPS] section 2.2.9.2), and the RopFastTransferSourceGetBuffer ROP ([MS-OXCROPS] section 2.2.12.4).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R962.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R961</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] When processing ROP requests, the server MUST NOT produce more than 32 KB worth of response data for all ROP requests.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R962</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] However, when the server finishes processing a RopQueryRows ROP ([MS-OXCROPS] section 2.2.5.4), RopReadStream ROP ([MS-OXCROPS] section 2.2.9.2), or RopFastTransferSourceGetBuffer ROP ([MS-OXCROPS] section 2.2.12.4) from the rgbIn request buffer and it [actual ROP request] was the last ROP command in the request and the client has requested packing through the Chain flag and there is residual room in the rgbOut response buffer, the server can add additional data to the rgbOut parameter response, each with its own RPC_HEADER_EXT header.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R963</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] For the server to produce additional response data, it [Extended Buffer Packing] MUST build a response as if the client sent another request with only a RopQueryRows ROP, RopReadStream ROP, or RopFastTransferSourceGetBuffer ROP.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R964</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] The additional response data is also limited to 32 KB in size.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R965</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] The additional ROP response is placed into the rgbOut parameter buffer following the previous header and associated payload with its own RPC_HEADER_EXT structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R966</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] The server can then compress and/or obfuscate this payload if the client requests and set the Flags field of the RPC_HEADER_EXT structure to indicate how the payload has been altered.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R967</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] If there is still more residual room remains in the rgbOut parameter, the server can continue to produce more response data until the rgbOut parameter does not have enough room to hold another response.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R968</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] The server MUST stop adding additional packed responses to the rgbOut parameter response if the residual size of the rgbOut parameter response is less than 8 KB for the RopReadStream ROP and RopFastTransferSourceGetBuffer ROP and 32 KB for the RopQueryRows ROP.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R969</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] The server MUST NOT place more than 96 individual payloads into a single rgbOut parameter response.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R970</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] When it adds additional response data, the server MUST alter its processing of the request to reflect what has already been done.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R971</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] For example, if the client requests to read 1,000 rows in the RopQueryRows ROP and the first payload contains 100 rows, the additional response data is processed as if the client requested only 900 rows.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R972</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] The server MUST NOT return more data to the client than the client originally requested.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R973</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] For the RopQueryRows ROP, the server MUST adjust the row count when adding additional response data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1280</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] For the RopReadStream ROP, the server MUST adjust the number of bytes to read when adding additional response data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1281</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] There is no specific limit for the RopFastTransferSourceGetBuffer ROP, but the server MUST stop packing additional extended buffers that contain the RopFastTransferSourceGetBuffer ROP when there is no more data for the fast transfer stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R976</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] For the RopFastTransferSourceGetBuffer ROP, the client requests that the server return all the server data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1776</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In rgbOut Output Buffer] For details about how to properly format the RopFastTransferSourceGetBuffer ROP in this way, see [MS-OXCROPS] section 2.2.12.4.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1650</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The EcDoRpcExt2 method, as specified in section 3.1.4.2, allows for additional data to travel between the server and client by using auxiliary buffers as specified in section 3.1.4.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R688, MS-OXCRPC_R1073, MS-OXCRPC_R1403.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1072</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] The following block [AUX_CLIENT_CONTROL] MAY&lt;25&gt; be sent from the server to the client in the rgbAuxOut parameter auxiliary buffer, as specified in section 3.1.4.1.1.1.2, on the EcDoRpcExt2 method, as specified in section 3.1.4.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R681</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1073</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] Each of these auxiliary blocks [AUX_CLIENT_CONTROL] MUST be preceded by a properly formatted AUX_HEADER structure, as specified in section 2.2.2.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1076</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] AUX_CLIENT_CONTROL: The client alters its behavior based on this request.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1074</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] AUX_CLIENT_CONTROL: Sent to the client to request a change in client behavior.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1075</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] AUX_CLIENT_CONTROL: This is a means for the server to dynamically change client behavior.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1651</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Server Topology Information] For details about what client behavior the server can adjust, see section 2.2.2.2.15.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1652</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Auxiliary buffers received from the client can contain reserved fields that are inserted in the buffer as padding to enforce alignment of the data on a 4-byte field width.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1653</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] The server MUST ignore the value of these fields [Reserved field in structures AUX_PERF_SESSIONINFO, AUX_PERF_SESSIONINFO_V2, AUX_PERF_DEFMDB_SUCCESS, AUX_PERF_DEFGC_SUCCESS, AUX_PERF_MDB_SUCCESS_V2, AUX_PERF_GC_SUCCESS, AUX_PERF_GC_SUCCESS_V2, AUX_PERF_FAILURE and AUX_PERF_FAILURE_V2] when reading the stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Partially verified by derived requirements: MS-OXCRPC_R1825, MS-OXCRPC_R1826, MS-OXCRPC_R1827, MS-OXCRPC_R1828, MS-OXCRPC_R1829, MS-OXCRPC_R1830, MS-OXCRPC_R1831, MS-OXCRPC_R1832, MS-OXCRPC_R1833, MS-OXCRPC_R1834, MS-OXCRPC_R1835.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1825</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the reserved field in structure AUX_PERF_SESSIONINFO.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1653:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1826</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the reserved field in structure AUX_PERF_SESSIONINFO_V2.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1653:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1827</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the reserved field in structure AUX_PERF_DEFMDB_SUCCESS.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1653:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1828</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the reserved field in structure AUX_PERF_DEFGC_SUCCESS.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1653:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1829</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the reserved field in structure AUX_PERF_MDB_SUCCESS_V2.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1653:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1830</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the Reserved_1 field in structure AUX_PERF_GC_SUCCESS.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1653:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1831</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the Reserved_2 field in structure AUX_PERF_GC_SUCCESS.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1653:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1832</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the reserved field in structure AUX_PERF_GC_SUCCESS_V2.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1653:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1833</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the reserved field in structure AUX_PERF_FAILURE.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1653:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1834</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the Reserved_1 field in structure AUX_PERF_FAILURE_V2.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1653:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1835</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] Reply is the same for two different values used for the Reserved_2 field in structure AUX_PERF_FAILURE_V2.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1653:p</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1654</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] The data sent to the server from the client in the auxiliary input buffer is purely informational.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1655</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.2.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Client] [The data sent to the server from the client in the auxiliary input buffer is purely informational,] the server is not required to respond in the auxiliary output buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R401</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.3</ns1:Doc_Sect>
		<ns1:Description>[In EcDoDisconnect Method (opnum 1)] The EcDoDisconnect method closes a Session Context with the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R402</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.3</ns1:Doc_Sect>
		<ns1:Description>[In EcDoDisconnect Method (opnum 1)] The server destroys the Session Context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1300</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.3</ns1:Doc_Sect>
		<ns1:Description>[In EcDoDisconnect Method (opnum 1)] The server releases all associated server state, objects, and resources that are associated with the Session Context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R404</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.3</ns1:Doc_Sect>
		<ns1:Description>[In EcDoDisconnect Method (opnum 1)] This [the method EcDoDisconnect] call requires an active session context handle from the EcDoConnectEx method, as specified in section 3.1.4.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4863</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.3</ns1:Doc_Sect>
		<ns1:Description>[In EcDoDisconnect Method (opnum 1)] pcxh: A session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R405</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.3</ns1:Doc_Sect>
		<ns1:Description>[In EcDoDisconnect Method (opnum 1)] pcxh: On input, this parameter is the session context handle of the Session Context that the client is disconnecting.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R406</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.3</ns1:Doc_Sect>
		<ns1:Description>[In EcDoDisconnect Method (opnum 1)] [pcxh] On output, the server MUST set the pcxh parameter to a zero value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R407</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.3</ns1:Doc_Sect>
		<ns1:Description>[In EcDoDisconnect Method (opnum 1)] [pcxh] Setting the value to zero instructs the RPC layer of the server to destroy the RPC context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R406.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R408</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.3</ns1:Doc_Sect>
		<ns1:Description>[In EcDoDisconnect Method (opnum 1)] Error Codes: If the method succeeds, the return value is 0.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R409</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.3</ns1:Doc_Sect>
		<ns1:Description>[In EcDoDisconnect Method (opnum 1)] [Error Codes] If the method fails, the return value is an implementation-specific error code.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R410</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.3</ns1:Doc_Sect>
		<ns1:Description>[In EcDoDisconnect Method (opnum 1)] Exceptions Thrown: No exceptions are thrown beyond those thrown by the underlying RPC protocol as specified in [MS-RPCE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R704</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] The EcDoAsyncConnectEx method binds a session context handle returned from the EcDoConnectEx method, as specified in section 3.1.4.1, to a new asynchronous context handle that can be used in calls to the EcDoAsyncWaitEx method in the AsyncEMSMDB interface, as specified in section 3.3.4.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R705</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] This [method EcDoAsyncConnectEx] call requires that an active session context handle be returned from the EcDoConnectEx method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R706</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] This method [EcDoAsyncConnectEx] is part of notification handling.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1656</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] For more information about notifications, see [MS-OXCNOTIF].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4864</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] cxh: A session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R708</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] CXH: The client MUST pass a valid session context handle that was created by calling the EcDoConnectEx method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R709</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] [CXH] The server uses the session context handle to identify the Session Context to use for this [method EcDoAsyncConnectEx] call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4865</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] pacxh: An asynchronous context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R710</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] pacxh: On success, the server returns an asynchronous context handle that is associated with the Session Context passed in the cxh parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R711</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] [pacxh] On failure the returned value is NULL.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R712</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] [pacxh] The asynchronous context handle can be used to make a call to the EcDoAsyncWaitEx method on the AsyncEMSMDB interface.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R713</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] Return Values: If the method succeeds, the return value is 0.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1386</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] [Return Values] If the method fails, the return value is an implementation-specific error code.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R714</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] [Return values] If the method fails, [the return value is an implementation-specific error code OR] the return value is the protocol-defined error code [ecRejected (0x000007EE)] listed in the following table.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R717</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] [Return Values] [ecRejected (0x000007EE)] The Server has asynchronous RPC notifications disabled. &lt;25&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1757, MS-OXCRPC_R1812.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R718</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] [Return Values] [ecRejected (0x000007EE)] Client either polls for notifications or calls the EcRRegisterPushNotifications method (section 3.1.4.5). &lt;25&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1941, MS-OXCRPC_R1942.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1387</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.4</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncConnectEx Method (opnum 14)] Exceptions Thrown: No exceptions are thrown beyond those thrown by the underlying RPC protocol as specified in [MS-RPCE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R415</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] The EcRRegisterPushNotification method registers a callback address with the server for a Session Context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1555</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] The server MAY&lt;26&gt; support the EcRRegisterPushNotification method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R4880, MS-OXCRPC_R1558.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R416</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] The callback address is used to notify the client of pending events on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R422.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R417</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] This [the method EcRRegisterPushNotification] call requires an active session context handle from the EcDoConnectEx method, as specified in section 3.1.4.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R420</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] The server MUST store the callback address and the opaque context data in the Session Context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R422</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] To notify the client of pending events, the server sends a packet containing just the opaque context data to the callback address.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R423</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] The callback address specifies which network transport is to be used to send the data packet.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R444, MS-OXCRPC_R1301.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1769</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] For more information about notification handling, see [MS-OXCNOTIF].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4866</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] pcxh: A session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R425</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] pcxh: On input, the client MUST pass a valid session context handle that was created by calling the EcDoConnectEx method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R426</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [pcxh] The server uses the session context handle to identify the Session Context to use for this call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R451.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R427</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [pcxh] On output, the server MUST return the same session context handle on success.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R428</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [pcxh] The server can destroy the session context handle by returning a zero for the pcxh parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1363</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [pcxh] Reasons for destroying the session context handle are implementation-dependent.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R430</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [pcxh] following are examples of why the server might destroy the session context handle: The session context handle that was passed in is not valid.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R431</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [pcxh] [following are examples of why the server might destroy the session context handle:] An attempt was made to access a mailbox that is in the process of being moved.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R432</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] iRpc: The server MUST ignore this value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R433</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [iRpc] The client MUST pass a value of 0x00000000.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R434</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] rgbContext: Opaque client-generated context data that is sent back to the client at the callback address, passed in the rgbCallbackAddress parameter, when the server notifies the client of pending event information.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R436</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [rgbContext] The server MUST save this data within the Session Context and use it when sending a notification to the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R437</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] cbContext: The size of the opaque client context data that is passed in the rgbContext parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R438</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [cbContext] If the value of this parameter is larger than 0x00000010, the server MUST fail the call with error code ecTooBig.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R439</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] grbitAdviseBits: This parameter MUST be set to 0xFFFFFFFF.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R440</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] rgbCallbackAddress: The callback address for the server to use to notify the client of a pending event.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R441</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [rgbCallbackAddress] The size of this data is in the cbCallbackAddress parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R442</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [rgbCallbackAddress] The data contained in this parameter follows the format of a sockaddr structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1559</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [rgbCallbackAddress] For information about the sockaddr structure, see [MSDN-SOCKADDR].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R444</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [rgbCallbackAddress] The server supports the address families AF_INET for a callback address that corresponds to the protocol sequence types that are specified in section 2.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1301</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [rgbCallbackAddress] The server supports the address families AF_INET6 for a callback address that corresponds to the protocol sequence types that are specified in section 2.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R446</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [rgbCallbackAddress] If an address family is requested that is not supported, the server MUST return error code ecInvalidParam.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R447</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [rgbCallbackAddress] If the address family is supported but the communications stack of the server does not support the address type, the server MUST return error code ecNotSupported.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R448</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] cbCallbackAddress: The length of the callback address in the rgbCallbackAddress parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R449</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [cbCallbackAddress] The size of this parameter depends on the address family being used.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R450</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [cbCallbackAddress] If this size does not correspond to the size of the sockaddr structure based on address family, the server MUST return error code ecInvalidParam.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4867</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] hNotification: A handle to the notification callback.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R451</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] hNotification: If the call completes successfully, the hNotification parameter contains a handle to the notification callback on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R452</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] Return Values: If the method succeeds, the return value is 0.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1364</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [Return Values] If the method fails, the return value is an implementation-specific error code.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1365</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [Return Values] If the method fails, [the return value is an implementation-specific error code or] the return value is one of the protocol-defined error codes [ecNotSupported(0x80040102), ecInvalidParam(0x80070057), ecTooBig(0x80040305)] listed in the following table.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R455</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [Return Values] ecInvalidParam (0x80070057) means "A parameter passed was not valid for the call".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R457</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [Return Values] ecNotSupported (0x80040102) means "The callback address is not supported on the server".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R459</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] [Return Values] ecTooBig (0x80040305) means "Opaque context data is too large".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R461</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.5</ns1:Doc_Sect>
		<ns1:Description>[In EcRRegisterPushNotification Method (opnum 4)] Exceptions Thrown: No exceptions are thrown beyond those thrown by the underlying RPC protocol as specified in [MS-RPCE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R464</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.6</ns1:Doc_Sect>
		<ns1:Description>[In EcDummyRpc Method (opnum 6)] The EcDummyRpc method returns a SUCCESS.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R465</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.6</ns1:Doc_Sect>
		<ns1:Description>[In EcDummyRpc Method (opnum 6)] A client can use it [method EcDummyRpc] to determine whether it [method EcDummyRpc] can communicate with the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R466</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.6</ns1:Doc_Sect>
		<ns1:Description>[In EcDummyRpc Method (opnum 6)] hBinding: A valid RPC binding handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R810</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.6</ns1:Doc_Sect>
		<ns1:Description>[In EcDummyRpc Method (opnum 6)] Return Values: The function MUST succeed and return 0.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R468</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.6</ns1:Doc_Sect>
		<ns1:Description>[In EcDummyRpc Method (opnum 6)] Exceptions Thrown: No exceptions are thrown beyond those thrown by the underlying RPC protocol as specified in [MS-RPCE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R399</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.7</ns1:Doc_Sect>
		<ns1:Description>[In Opnum0NotUsedOnWire Method (Opnum 0)] The Opnum0NotUsedOnWire method is reserved for local use.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R400</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.7</ns1:Doc_Sect>
		<ns1:Description>[In Opnum0NotUsedOnWire Method (Opnum 0)] The client MUST NOT send this method [Opnum0NotUsedOnWire].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R411</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.8</ns1:Doc_Sect>
		<ns1:Description>[In Opnum2NotUsedOnWire Method (Opnum 2)] The Opnum2NotUsedOnWire method is reserved for local use.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R412</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.8</ns1:Doc_Sect>
		<ns1:Description>[In Opnum2NotUsedOnWire Method (Opnum 2)] The client MUST NOT send this method [Opnum2NotUsedOnWire].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R413</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.9</ns1:Doc_Sect>
		<ns1:Description>[In Opnum3NotUsedOnWire Method (Opnum 3)] The Opnum3NotUsedOnWire method is reserved for local use.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R414</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.9</ns1:Doc_Sect>
		<ns1:Description>[In Opnum3NotUsedOnWire Method (Opnum 3)] The client MUST NOT send this method [Opnum3NotUsedOnWire].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R462</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.10</ns1:Doc_Sect>
		<ns1:Description>[In Opnum5NotUsedOnWire Method (Opnum 5)] The Opnum5NotUsedOnWire method is reserved for local use.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R463</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.10</ns1:Doc_Sect>
		<ns1:Description>[In Opnum5NotUsedOnWire Method (Opnum 5)] The client MUST NOT send this method [Opnum5NotUsedOnWire].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R469</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.11</ns1:Doc_Sect>
		<ns1:Description>[In Opnum7NotUsedOnWire Method (Opnum 7)] The Opnum7NotUsedOnWire method is reserved for local use.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R470</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.11</ns1:Doc_Sect>
		<ns1:Description>[In Opnum7NotUsedOnWire Method (Opnum 7)] The client MUST NOT send this method [Opnum7NotUsedOnWire].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R471</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.12</ns1:Doc_Sect>
		<ns1:Description>[In Opnum8NotUsedOnWire Method (Opnum 8)] The Opnum8NotUsedOnWire method is reserved for local use.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R472</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.12</ns1:Doc_Sect>
		<ns1:Description>[In Opnum8NotUsedOnWire Method (Opnum 8)] The client MUST NOT send this method [Opnum8NotUsedOnWire].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R473</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.13</ns1:Doc_Sect>
		<ns1:Description>[In Opnum9NotUsedOnWire Method (Opnum 9)] The Opnum9NotUsedOnWire method is reserved for local use.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R474</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.13</ns1:Doc_Sect>
		<ns1:Description>[In Opnum9NotUsedOnWire Method (Opnum 9)] The client MUST NOT send this method [Opnum9NotUsedOnWire].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R700</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.14</ns1:Doc_Sect>
		<ns1:Description>[In Opnum12NotUsedOnWire Method (Opnum 12)] The Opnum12NotUsedOnWire method is reserved for local use.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R701</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.14</ns1:Doc_Sect>
		<ns1:Description>[In Opnum12NotUsedOnWire Method (Opnum 12)] The client MUST NOT send this method [Opnum12NotUsedOnWire].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R702</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.15</ns1:Doc_Sect>
		<ns1:Description>[In Opnum13NotUsedOnWire Method (Opnum 13)] The Opnum13NotUsedOnWire method is reserved for local use.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R703</ns1:REQ_ID>
		<ns1:Doc_Sect>3.1.4.15</ns1:Doc_Sect>
		<ns1:Description>[In Opnum13NotUsedOnWire Method (Opnum 13)] The client MUST NOT send this method [Opnum13NotUsedOnWire].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1657</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] This section [section 3.2.1] describes a conceptual model of possible data organization that an implementation maintains to participate in this protocol [MS-OXCRPC].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1658</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] The described organization is provided to facilitate the explanation of how the protocol [MS-OXCRPC] behaves.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1659</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] This specification does not mandate that implementations adhere to this model as long as their external behavior is consistent with that described in this specification.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1135</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] For some functionality on the EMSMDB interface, it is required that the client store a session context handle, as specified in section 3.1.1.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1136</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] [For some functionality on the EMSMDB interface, it is required that the client store a session context handle] and use it [the session context handle] on subsequent interface calls that require a session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1138</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] The client creates an RPC connection to the remote server according to the details specified in section 2.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1139</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] Establishing a connection with the server requires authentication.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1140</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] The RPC binding handle MUST have an authentication method defined.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1141</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] This protocol [MS-OXCRPC] MUST indicate to the RPC runtime that it is to perform a strict NDR data consistency check at target level 5.0, as specified in [MS-RPCE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1142</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Upon the completion of the RPC method, the client returns the result unmodified to the higher layer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1143</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Some method calls require an RPC context handle, which is created in another method call. For details about method dependencies, see section 3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1411</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] A client SHOULD&lt;27&gt; use different RPC methods based on the product version being run on the server that it [the client] is accessing.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1144</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] When issuing the EcDoConnectEx method on the EMSMDB interface, some parameters require additional client-side consideration beyond what is stated in section 3.1.4.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1145</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] The parameters for which the client has specific handling are as follows:
hBinding: A valid RPC binding handle that MUST have a server name, protocol sequence, and authentication method defined.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1146</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [hBinding] [The following is a list of parameters for which the client has specific handling:] Some protocol sequences have named endpoints that MUST be used.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1660</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [hBinding] For details about how to create a binding handle, see section 2.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1147</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] pcxh: On success, this parameter will contain the session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1485</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pcxh] On failure, this value is NULL.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1286</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pcxh] The session context handle MUST be stored on the client and used in subsequent calls on the EMSMDB interface that require a valid session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1149</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] ulConMod: The connection modulus hash is determined by the client for a connection.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1150</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [ulConMod] How the client determines the hash value is an implementation detail.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1151</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [ulConMod] The client ensures that for a particular DN passed in field szUserDN parameter, the hash value is the same.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1263</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [ulConMod] It is acceptable to have the same hash value for different DNs.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1264</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [ulConMod] The client is free to send any 32-bit value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1153</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] cbLimit: A client MUST pass a value of 0x00000000.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1154</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] ulIcxrLink: This value is used to link the Session Context that is created by this call [EcDoConnectEx method] with an existing Session Context on the server that was created by a previous call to the EcDoConnectEx method.&lt;28&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1155</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [ulIcxrLink] [A client can link two Session Contexts for the following reasons:] To consume a single CAL for all the connections made from a single client computer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1156</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [ulIcxrLink] [A client can link two Session Contexts for the following reasons:] This [CAL] gives a client the ability to open multiple independent connections by using more than one Session Context on the server but be seen to the server as only consuming a single CAL.&lt;29&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1157</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [ulIcxrLink] [A client can link two Session Contexts for the following reasons:] To get pending notification information for other sessions on the same client computer. For details, see [MS-OXCNOTIF].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1158</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [ulIcxrLink] If a client is not requesting to link two Session Contexts, the client MUST pass a value of 0xFFFFFFFF.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1287</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [ulIcxrLink] If this [client calls EcDoConnectEx] is the first call to the EcDoConnectEx method, the client MUST pass a value of 0xFFFFFFFF.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1159</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [ulIcxrLink] Note that the ulIcxrLink parameter is defined as a 32-bit value.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1160</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [ulIcxrLink] Other than passing 0xFFFFFFFF if there is no Session Context link, the client passes a value with the high-order 16-bits set to zero.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1161</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [ulIcxrLink] [Note that the ulIcxrLink parameter is defined as a 32-bit value. Other than passing 0xFFFFFFFF for no Session Context link, the client passes a value with the high-order 16-bits set to zero] and the low-order 16-bits MUST be the value returned in the piCxr parameter from a previous EcDoConnectEx method call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1162</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] usFCanConvertCodePages: The client MUST pass a value of 0x0001.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1163</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] pcmsPollsMax: On success, this value is the number of milliseconds the client waits before polling the server for notification information.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1327</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pcmsPollsMax] On failure, the value of this field is undefined.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1328</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pcmsPollsMax] On failure, the value of this field SHOULD be ignored.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1164</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pcmsPollsMax] Other more dynamic options are available to the client for receiving notifications from the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1165</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pcmsPollsMax] The client saves this value [pcmsPollsMax] and associates it [pcmsPollsMax] with the session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1166</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] pcRetry: On success, this value is the number of times the client retries a subsequent EMSMDB interface method call that uses the session context handle that is returned in the pcxh parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1167</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pcRetry] On failure, the value of this field is undefined.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1332</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pcRetry] On failure, the value of this field SHOULD be ignored.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1666</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pcRetry] For details about retrying RPCs, see section 3.2.4.4.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1168</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pcRetry] The client saves this value [pcRetry] and associates it [pcRetry] with the session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1169</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] pcmsRetryDelay: On success, this value is the number of milliseconds a client waits before retrying a subsequent EMSMDB interface method call that uses the session context handle that is returned in the pcxh parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1170</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pcmsRetryDelay] On failure, the value of this field is undefined.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1334</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pcmsRetryDelay] On failure, the value of this field] SHOULD be ignored.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1171</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pcmsRetryDelay] The client saves this value [pcmsRetryDelay] and associates it [pcmsRetryDelay] with the session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1172</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] piCxr: On success, this value is a 16-bit session index that can be used in conjunction with the value returned in the pulTimeStamp parameter to link two Session Contexts on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1173</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [piCxr] On failure, the value of this field is undefined.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1336</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [piCxr] On failure, the value of this field SHOULD be ignored.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1669</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [piCxr] For details about how to link Session Contexts and the reason why a client might request to do so [the client behavior when piCxr is on success or on failure], see the ulIcxrLink parameter.&lt;30&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1174</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [piCxr] The client saves this value [piCxr] and associates it [piCxr] with the session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1175</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [piCxr] It is the session index returned in a RopPending ROP response ([MS-OXCROPS] section 2.2.14.3) on calls to the EcDoRpcExt2 method, as specified in section 3.1.4.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1176</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [piCxr] The RopPending ROP response tells the client that a Session Context on the server has pending notifications.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R1175, MS-OXCRPC_R1177.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1177</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [piCxr] If a client links Session Contexts, a RopPending ROP can be returned for any linked Session Context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1178</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] rgwClientVersion: The client MUST pass the version number of the highest client protocol version it [the client] supports.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1179</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [rgwClientVersion] This value will provide information to the server about the protocol functionality that the client supports.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1670</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [rgwClientVersion] For details about how version numbers are interpreted from the wire data and the expected client behavior, see section 3.2.4.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1180</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] rgwServerVersion: On success, this value is the server protocol version that the client uses to determine what protocol functionality the server supports.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1181</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [rgwServerVersion] On failure, the value of this field is undefined.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1325</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [rgwServerVersion] On failure, the value of this field SHOULD be ignored.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1671</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [rgwServerVersion] For details about how version numbers are interpreted from the wire data and the expected server behavior, see section 3.1.4.1.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1182</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [rgwServerVersion] The client saves this value [rgwServerVersion] and associates it [rgwServerVersion] with the session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1183</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] pulTimeStamp: If a client requests to link the Session Context that is created by this call to a previously created Session Context, the client MUST pass on input the session creation time stamp returned in the pulTimeStamp parameter on a previous EcDoConnectEx method call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1184</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pulTimeStamp] If the client is not requesting to link Session Contexts, the client passes value 0x00000000.&lt;31&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1185</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pulTimeStamp] On success, this value is the Session Context creation time stamp.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1186</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pulTimeStamp] On failure, the value of this field is undefined.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1323</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pulTimeStamp] On failure, the value of this field SHOULD be ignored.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1187</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoConnectEx Method] [pulTimeStamp] The server saves the Session Context creation time stamp and associates it [time stamp] with the session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1672</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] The EcDoConnectEx method, as specified in section 3.1.4.1, contains request and response buffers that use an extended buffer mechanism where the payload is preceded by a header.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R747.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1673</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] The handling of the extended buffer is specified in section 3.1.4.1.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1674</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling]  Compression, as specified in section 3.1.4.1.1.2, or obfuscation, as specified in section 3.1.4.1.1.3, can be done differently for each header and associated payload.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R752.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1675</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] The client MUST be able to treat each header and associated payload independently and interpret the contents solely on the flags specified in the structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R977</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The EcDoConnectEx method, as specified in section 3.1.4.1, allows for additional data to travel between the client and server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R581, MS-OXCRPC_R574, MS-OXCRPC_R1061, MS-OXCRPC_R990, MS-OXCRPC_R1597, MS-OXCRPC_R993, MS-OXCRPC_R55, MS-OXCRPC_R1692, MS-OXCRPC_R1438, MS-OXCRPC_R1521, MS-OXCRPC_R1839, MS-OXCRPC_R1535, MS-OXCRPC_R1540, MS-OXCRPC_R1539, MS-OXCRPC_R1060.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R978</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] This additional data [which is allowed by methods EcDoConnectEx to travel between the client and server] is transferred in the auxiliary buffers of the method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R581, MS-OXCRPC_R574, MS-OXCRPC_R1061, MS-OXCRPC_R990, MS-OXCRPC_R1597, MS-OXCRPC_R993, MS-OXCRPC_R55, MS-OXCRPC_R1692, MS-OXCRPC_R1438, MS-OXCRPC_R1521, MS-OXCRPC_R1839, MS-OXCRPC_R1060.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R979</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The rgbAuxIn parameter is for auxiliary data being sent from the client to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R980</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] Unlike the ROP request and ROP response payloads in the rgbIn and rgbOut parameters, there is no request and response nature to the auxiliary buffers.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R981</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The data sent to the server from the client in the auxiliary input buffer is purely informational.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1254</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] [The data sent to the server from the client in the auxiliary input buffer is purely informational and] the server is not required to respond in the auxiliary output buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R984</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The data being transferred in the auxiliary buffers from the client to the server is client-side performance information, which is statistical information that the client can keep regarding its communication with the messaging server or the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1283</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] Part of this information [client-side performance information] is for when the client fails to communicate with the messaging server or the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1284</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The client can then report this information to the server the next time it communicates.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R990</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] All information in the auxiliary buffer MUST be added with an AUX_HEADER structure preceding the actual auxiliary information.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R991</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] Within the AUX_HEADER structure, the Version and Type fields combined determine which auxiliary block follows the header.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R55.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1678</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] For details about how to format the AUX_HEADER structure to indicate which auxiliary block follows, see section 2.2.2.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R992</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] If the client receives an auxiliary AUX_HEADER structure block with a version and type it [the client] does not recognize (that is, does not support), it [the client] MUST skip over the entire block (header and auxiliary payload) without throwing an error.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R993</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The AUX_HEADER structure block contains the length of the AUX_HEADER structure itself plus the following auxiliary block structure in its Size field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R994</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] [The AUX_HEADER contains the length of the AUX_HEADER plus the following auxiliary block in the field Size,] so the information can be skipped.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R998</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] The following Blocks [AUX_PERF_CLIENTINFO, AUX_PERF_PROCESSINFO, AUX_PERF_SESSIONINFO, AUX_PERF_SESSIONINFO_V2 and AUX_CLIENT_CONNECTION_INFO] are sent from the client to the server in the rgbAuxIn parameter auxiliary buffer on the EcDoConnectEx method to support client performance monitoring.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R999</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] Each of these auxiliary blocks [AUX_PERF_CLIENTINFO, AUX_PERF_PROCESSINFO, AUX_PERF_SESSIONINFO, AUX_PERF_SESSIONINFO_V2 and AUX_CLIENT_CONNECTION_INFO] MUST be preceded by a properly formatted AUX_HEADER structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1679</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] The client can fill reserved fields in these blocks [AUX_PERF_CLIENTINFO, AUX_PERF_PROCESSINFO, AUX_PERF_SESSIONINFO, AUX_PERF_SESSIONINFO_V2, AUX_CLIENT_CONNECTION_INFO] with any value when writing the stream (2).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1000</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_CLIENTINFO: Sent to the server as diagnostic information about the client for more robust reporting of networking issues.&lt;32&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1004</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_CLIENTINFO] The client MUST assign a unique client identifier for each AUX_PERF_CLIENTINFO block sent to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1005</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_CLIENTINFO] The client identifier is also used in other performance blocks to identify which client to associate the performance data with.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1006</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_PROCESSINFO: Sent to the server as diagnostic information about the client process for more robust reporting of networking issues.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1007</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_PROCESSINFO] The client MUST assign a unique process identifier for each AUX_PERF_PROCESSINFO auxiliary block structure sent to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1008</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_PROCESSINFO] The process identifier is also used in other performance blocks to identify which client process to associate the performance data with.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1009</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_SESSIONINFO: Sent to the server as diagnostic information about the client session for more robust reporting of networking issues.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1010</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO] The client MUST assign a unique session identifier for each AUX_PERF_SESSIONINFO or AUX_PERF_SESSIONINFO_V2 auxiliary block structure sent to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1011</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO] The session identifier is also used in other performance blocks to identify which client session to associate the performance data with.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1012</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO] It is recommended that the AUX_PERF_SESSIONINFO_V2 auxiliary block structure be used instead of this block structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1013</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO] A server still supports this older session information [AUX_PERF_SESSIONINFO] auxiliary block.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1014</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO] This block can also be passed in the EcDoRpcExt2 method auxiliary input buffer (section 3.1.4.2.1.1.3).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1015</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_SESSIONINFO_V2: Sent to the server as diagnostic information about the client session for more robust reporting of networking issues.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1016</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO_V2] The client MUST assign a unique session identifier for each AUX_PERF_SESSIONINFO_V2 or AUX_PERF_SESSIONINFO auxiliary block structure sent to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1017</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO_V2] The session identifier is also used in other performance blocks to identify which client session to associate the performance data with.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1018</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO_V2] This block can also be passed in the EcDoRpcExt2 method auxiliary input buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1680</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_CLIENT_CONNECTION_INFO: Sent to the server as information about the client connection to be logged by the server.&lt;33&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1885</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PROTOCOL_DEVICE_IDENTIFICATION: Sent to the server as diagnostic information by any device or system operating between the client and the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1681</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Server] Auxiliary buffers received from the server can contain reserved fields that are inserted in the buffer as padding to enforce alignment of the data on a 4-byte field.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1682</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Server] The client MUST ignore the value of these fields when reading the stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1683</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Processing Auxiliary Buffers Received from the Server] The data received from the server is informational data that the client can use to alter its [client] behavior against the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1684</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Version Checking] In the EcDoConnectEx method, as specified in section 3.2.4.1, the client passes the client version to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1685</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3</ns1:Doc_Sect>
		<ns1:Description>[In Version Checking] The client version information indicates to the server what functionality the client supports.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1686</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Version Number Comparison] Version number comparison is specified in section 3.1.4.1.3.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1131</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] A client implementation determines which level of support it [the client] will offer servers.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1132</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] Based on this level [the level of support the client will offer servers] of support, it [the client] MUST pass a client version that corresponds to that support.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1133</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] A client cannot mix and match functionality.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1134</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] To support functionality at one client version level, it [the client] MUST support all functionality from previous client version levels.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1116</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] The following table [table in section 3.2.4.1.3.2] shows client versions [11.0.0.0, 11.00.0000.4920, 12.00.0000.000, 12.00.3118.000, 12.00.3619.000, 12.00.3730.000, 12.00.4207.000, 12.00.4228.0000] that are passed to the server on the EcDoConnectEx method, as specified in section 3.1.4.1, where the client can expect the server behavior to change if the version that is transferred on the wire is equal to or greater than the client version numbers as listed in the table.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1117</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "11.0.0.0"] The client supports receiving Unicode strings for all string properties on recipient row data that is returned from the server on the RopReadRecipients ROP ([MS-OXCROPS] section 2.2.6.6), the RopOpenMessage ROP ([MS-OXCROPS] section 2.2.6.1), and the RopOpenEmbeddedMessage ROP ([MS-OXCROPS] section 2.2.6.16).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1687</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "11.0.0.0"] This [11.0.0.0] is the minimum version that a client supports to implement the protocol.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1118</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "11.00.0000.4920"] The client supports receiving ecServerBusy (0x00000480) in the ReturnValue field of the RopFastTransferSourceGetBuffer ROP response ([MS-OXCROPS] section 2.2.12.4).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1119</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "11.00.0000.4920"] The BackoffTime field is present when the ReturnValue field contains ecServerBusy.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1120</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "11.00.0000.4920"] If the value of the ReturnValue field is not ecServerBusy, the BackoffTime field is not present.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1688</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions]  [Client version "11.00.0000.4920"] For details about the RopFastTransferSourceGetBuffer ROP, see [MS-OXCFXICS] sections 2.2.3.1.1.5 and 3.2.5.8.1.5.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1121</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.0000.000"] The client supports receiving the errors ecCachedModeRequired, ecRpcHttpDisallowed, and ecProtocolDisabled on the EcDoConnectEx method call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1122</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.0000.000"] otherwise [the client does not support receiving the errors ecCachedModeRequired, ecRpcHttpDisallowed, and ecProtocolDisabled on the EcDoConnectEx call], the client will get back ecClientVerDisallowed instead.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1689</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.0000.000"] The client supports topologies that do not have public folders available.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1690</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] For client versions earlier than 12.00.0000.000, the server MUST fail the EcDoConnectEx method call with ecClientVerDisallowed when no public folders are configured within the messaging system unless the EcDoConnectEx method parameter flag 0x00008000 is passed in the ulFlags parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R4885, MS-OXCRPC_R4886.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4885</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.0000.000"] For client versions earlier than 12.00.0000.000, the server MUST fail the EcDoConnectEx method call with ecClientVerDisallowed when no public folders are configured within the messaging system if the EcDoConnectEx method parameter flag 0x00008000 is not passed in the ulFlags parameter.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1690:i</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4886</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.0000.000"] For client versions earlier than 12.00.0000.000, the server MUST not fail the EcDoConnectEx method call with ecClientVerDisallowed if the EcDoConnectEx method parameter flag 0x00008000 is passed in the ulFlags parameter.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1690:i</ns1:Derived>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1123</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.3118.000"] The client supports receiving an AUX_EXORGINFO block in the rgbAuxOut parameter (section 3.1.4.1.1.1.2), on the EcDoConnectEx method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1691</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.3118.000"] The server SHOULD return the the AUX_EXORGINFO auxiliary block structure in the rgbAuxOut parameter on the EcDoConnectEx method call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirement: MS-OXCRPC_R1692.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1124</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.3619.000"] The client supports receiving the error ecNotEncrypted on the EcDoConnectEx method call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1125</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.3619.000"] otherwise [the client does not support receiving the errors ecNotEncrypted on the EcDoConnectEx call], the client will get back ecClientVerDisallowed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1126</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.3619.000"] This error [ecNotEncrypted] is returned when the server is configured to only allow encrypted connections and the client is trying to connect on a nonencrypted connection.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1127</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.3730.000"] The client supports send optimization for Incremental Change Synchronization (ICS) using the PidTagTargetEntryId property ([MS-OXOMSG] section 2.2.1.69).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1886</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] For more details, see [MS-OXCFXICS] section 3.3.4.3.3.2.1.2</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1128</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.4207.000"] The client supports packing of the RopReadStream ROP ([MS-OXCROPS] section 2.2.9.2) in the ROP response buffer of the EcDoRpcExt2 method (section 3.1.4.2).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1129</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.4207.000"] The RopReadStream ROP MUST be the last ROP in the request buffer on the EcDoRpcExt2 method call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1693</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.4207.000"] For details about extended buffer packing, see section 3.1.4.2.1.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1130</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] [Client version "12.00.4228.000"] The client supports receiving the RopBackoff ROP ([MS-OXCROPS] section 2.2.15.2) in the ROP response buffer of the EcDoRpcExt2 method call.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1887</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.2</ns1:Doc_Sect>
		<ns1:Description>[In Client Versions] For details, see [MS-OXCROPS] section 3.1.5.1.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1694</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.1.3.3</ns1:Doc_Sect>
		<ns1:Description>[In Version Numbers Received from the Server] The client can assume that the described functionality exists if the version number that is passed in the RPC buffer is equal to or greater than the server version number in which the functionality was added, as specified in section 3.1.4.1.3.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1188</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoRpcExt2 Method] When issuing the EcDoRpcExt2 method, as specified in section 3.1.4.2, some parameters require additional client-side consideration beyond what is stated in section 3.1.4.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1695</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoRpcExt2 Method] The client has specific handling for the following parameter: pcxh.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1189</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoRpcExt2 Method] pcxh: The client MUST pass a valid session context handle that was created by calling the EcDoConnectEx method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1191</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoRpcExt2 Method] [pcxh] If the value of the pcxh parameter on output is zero, the Session Context on the server has been destroyed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1696</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] The EcDoRpcExt2 method, as specified in section 3.1.4.2, contains request and response buffers that use an extended buffer mechanism in which the payload is preceded by a header. Extended buffer handling is specified in section 3.1.4.1.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R747.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1697</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] Compression, as specified in section 3.1.4.1.1.2, or obfuscation, as specified in section 3.1.4.1.1.3, can be done differently for each header and associated payload section.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R752.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1698</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Extended Buffer Handling] The client MUST be able to treat each header and its associated payload independently and to interpret the payload contents solely on the flags specified in the header.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1700</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The EcDoRpcExt2 method, as specified in section 3.1.4.2, allows for additional data to travel between the client and server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R688, MS-OXCRPC_R1073, MS-OXCRPC_R1403.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1701</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] This additional data [data travels between the client and server] is transferred in the auxiliary buffers of the method.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirements: MS-OXCRPC_R688, MS-OXCRPC_R1073, MS-OXCRPC_R1403.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1702</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The rgbAuxIn parameter payload is for auxiliary data being sent from the client to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1703</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] Unlike the ROP request and response rgbIn and rgbOut parameter payloads, there is no request and response nature to the auxiliary buffers.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1704</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The data sent to the server from the client in the auxiliary input buffer is purely informational.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1705</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] [The data sent to the server from the client in the auxiliary input buffer is purely informational,] the server is not required to respond in the auxiliary output buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1706</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The data being transferred in the auxiliary buffers from the client to the server is client-side performance information, which is statistical information the client can keep regarding its [client] communication with the messaging server or the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1707</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] Part of this information [the data being transferred in the auxiliary buffers from the client to the server] is for when the client fails to communicate with the messaging server or the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1708</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The client can then report this information [the data being transferred in the auxiliary buffers from the client to the server] to the server the next time it [client] communicates.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1709</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] All information in the auxiliary buffer MUST be added with an AUX_HEADER structure preceding the actual auxiliary block information.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1710</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] For details about the AUX_HEADER structure and how it is formatted, see section 2.2.2.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1711</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] Within the AUX_HEADER header, the Version field and Type field are combined to determine which auxiliary block follows the header.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1712</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] For details about how to format the AUX_HEADER header to indicate which auxiliary block follows, see section 2.2.2.2</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1713</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] If the client receives an auxiliary AUX_HEADER structure block with a version and type it [client] does not recognize (that is, does not support), it [client] MUST skip over the entire block, including the following auxiliary block, without throwing an error.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1714</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2</ns1:Doc_Sect>
		<ns1:Description>[In Auxiliary Buffer] The AUX_HEADER structure block contains the length of the AUX_HEADER structure plus the following auxiliary block in the Size field, and so the information can be skipped.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1019</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] The following blocks [AUX_PERF_SESSIONINFO, AUX_PERF_SESSIONINFO_V2, AUX_PERF_SERVERINFO, AUX_PERF_REQUESTID, AUX_PERF_DEFMDB_SUCCESS, AUX_PERF_DEFGC_SUCCESS, AUX_PERF_MDB_SUCCESS, AUX_PERF_MDB_SUCCESS_V2, AUX_PERF_GC_SUCCESS, AUX_PERF_GC_SUCCESS_V2, AUX_PERF_FAILURE and AUX_PERF_FAILURE_V2] are sent from the client to the server in the rgbAuxIn parameter, as specified in section 3.1.4.1.1.1.1, on the EcDoRpcExt2 method, as specified in section 3.1.4.2, to support client performance monitoring.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1020</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] Each of these auxiliary blocks [AUX_PERF_SESSIONINFO, AUX_PERF_SESSIONINFO_V2, AUX_PERF_SERVERINFO, AUX_PERF_REQUESTID, AUX_PERF_DEFMDB_SUCCESS, AUX_PERF_DEFGC_SUCCESS, AUX_PERF_MDB_SUCCESS, AUX_PERF_MDB_SUCCESS_V2, AUX_PERF_GC_SUCCESS, AUX_PERF_GC_SUCCESS_V2, AUX_PERF_FAILURE and AUX_PERF_FAILURE_V2] MUST be preceded by a properly formatted AUX_HEADER structure, as specified in section 2.2.2.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1715</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] The client can fill reserved fields in these blocks [AUX_PERF_SESSIONINFO, AUX_PERF_SESSIONINFO_V2, AUX_PERF_SERVERINFO, AUX_PERF_REQUESTID, AUX_PERF_DEFMDB_SUCCESS, AUX_PERF_DEFGC_SUCCESS, AUX_PERF_MDB_SUCCESS, AUX_PERF_MDB_SUCCESS_V2, AUX_PERF_GC_SUCCESS, AUX_PERF_GC_SUCCESS_V2, AUX_PERF_FAILURE and AUX_PERF_FAILURE_V2] with any value when writing the stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1021</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_SESSIONINFO: Sent to the server as diagnostic information about the client session for more robust reporting of networking issues.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1022</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO] The client MUST assign a unique session identifier for each AUX_PERF_SESSIONINFO or AUX_PERF_SESSIONINFO_V2 auxiliary block structure sent to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1023</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO] The session identifier is also used in other performance blocks to identify which client session to associate the performance data with.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1024</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO] It is recommended that the AUX_PERF_SESSIONINFO_V2 auxiliary block structure be used instead of this auxiliary block structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1025</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO] A server still supports this older session information [AUX_PERF_SESSIONINFO] auxiliary block structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1026</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO] This block can also be passed in the EcDoConnectEx method auxiliary input buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1027</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_SESSIONINFO_V2: Sent to the server as diagnostic information about the client session for more robust reporting of networking issues.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1028</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO_V2] The client MUST assign a unique session identifier for each AUX_PERF_SESSIONINFO_V2 or AUX_PERF_SESSIONINFO auxiliary block structure sent to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1029</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO_V2] The session identifier is also used in other performance blocks to identify which client session to associate the performance data with.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1030</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SESSIONINFO_V2] This block can also be passed in the EcDoConnectEx method auxiliary input buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1031</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_SERVERINFO: Sent to the server as diagnostic information about the server that the client is communicating with for more robust reporting of networking issues.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1032</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SERVERINFO] The client MUST assign a unique server identifier for each AUX_PERF_SERVERINFO auxiliary block structure sent to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1033</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_SERVERINFO] The server identifier is also used in other performance blocks to identify which server a client is communicating with to associate the performance data.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1034</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_REQUESTID: Sent to the server as diagnostic information about a particular request for more robust reporting of networking issues.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1035</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_REQUESTID] The client MUST assign a unique request identifier for each AUX_PERF_REQUESTID auxiliary block structure sent to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1036</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_REQUESTID] The request identifier is also used in other performance blocks to identify which request to associate the performance data with.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1393</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_REQUESTID] The client SHOULD acquire the SessionID field value used within this block by previously sending either an AUX_PERF_SESSIONINFO auxiliary block structure or an AUX_PERF_SESSIONINFO_V2 auxiliary block structure to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1038</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_DEFMDB_SUCCESS: Sent to the server as diagnostic information to report a previously successful RPC to the messaging server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1716</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_DEFMDB_SUCCESS] The client can fill the Reserved field in this auxiliary buffer with any value when writing the stream.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1394</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_DEFMDB_SUCCESS] The client acquires the RequestID field value used within this block by previously sending an AUX_PERF_REQUESTID auxiliary block structure to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1040</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_DEFGC_SUCCESS: Sent to the server as diagnostic information to report a previously successful call to the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1395</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_DEFGC_SUCCESS] The client acquires the values of the ServerID and SessionID fields used within this block by previously sending an AUX_PERF_SERVERINFO auxiliary block structure and either an AUX_PERF_SESSIONINFO auxiliary block structure or an AUX_PERF_SESSIONINFO_V2 auxiliary block structure to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1042</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_MDB_SUCCESS: Sent to the server as diagnostic information to report a previously successful RPC to the messaging server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1396</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_MDB_SUCCESS] The client acquires the values of the RequestID, ClientID, ServerID, and SessionID fields used within this block by previously sending the AUX_PERF_REQUESTID auxiliary block structure, the AUX_PERF_CLIENTINFO auxiliary block structure, the AUX_PERF_SERVERINFO auxiliary block structure, and either the AUX_PERF_SESSIONINFO auxiliary block structure or the AUX_PERF_SESSIONINFO_V2 auxiliary block structure to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1044</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_MDB_SUCCESS] It is recommended that the AUX_PERF_MDB_SUCCESS_V2 auxiliary block structure be used instead of this older auxiliary block structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1045</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_MDB_SUCCESS] A server still supports this older session information [AUX_PERF_MDB_SUCCESS] auxiliary block.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1046</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_MDB_SUCCESS_V2: Sent to the server as diagnostic information to report a previously successful RPC to the messaging server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1397</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_MDB_SUCCESS_V2] The client acquires the values of the RequestID, ProcessID, ClientID, ServerID, and SessionID fields used within this block by previously sending the AUX_PERF_REQUESTID auxiliary block structure, the AUX_PERF_PROCESSINFO auxiliary block structure, the AUX_PERF_CLIENTINFO auxiliary block structure, the AUX_PERF_SERVERINFO auxiliary block structure, and either the AUX_PERF_SESSIONINFO auxiliary block structure or the AUX_PERF_SESSIONINFO_V2 auxiliary block structure to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1048</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_GC_SUCCESS: Sent to the server as diagnostic information to report a previously successful call to the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1398</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_GC_SUCCESS] The client acquires the values of the ClientID, ServerID, and SessionID fields used within this block by previously sending the AUX_PERF_CLIENTINFO auxiliary block structure, the AUX_PERF_SERVERINFO auxiliary block structure, and either the AUX_PERF_SESSIONINFO auxiliary block structure or the AUX_PERF_SESSIONINFO_V2 auxiliary block structure to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1050</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_GC_SUCCESS] It is recommended that the AUX_PERF_GC_SUCCESS_V2 auxiliary block structure be used instead of this auxiliary block structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1051</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_GC_SUCCESS] A server still supports this older session information [AUX_PERF_GC_SUCCESS] auxiliary block.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1052</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_GC_SUCCESS_V2: Sent to the server as diagnostic information to report a previously successful call to the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1399</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_GC_SUCCESS_V2] The client acquires the values of the ProcessID, ClientID, ServerID, and SessionID fields used within this block by previously sending the AUX_PERF_PROCESSINFO auxiliary block structure, the AUX_PERF_CLIENTINFO auxiliary block structure, the AUX_PERF_SERVERINFO auxiliary block structure, and either the AUX_PERF_SESSIONINFO auxiliary block structure or the AUX_PERF_SESSIONINFO_V2 auxiliary block structure to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1054</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_FAILURE: Sent to the server as diagnostic information to report a previously failed call to the messaging server or the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1400</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_FAILURE] The client acquires the the values of the RequestID, ClientID, ServerID, and SessionID fields used within this block by previously sending the AUX_PERF_REQUESTID auxiliary block structure, theAUX_PERF_CLIENTINFO auxiliary block structure, the AUX_PERF_SERVERINFO, and either the AUX_PERF_SESSIONINFO auxiliary block structure or the AUX_PERF_SESSIONINFO_V2 auxiliary block structure to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1056</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_FAILURE] It is recommended that AUX_PERF_FAILURE_V2 auxiliary block structure be used instead of this auxiliary block structure.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1057</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_FAILURE] A server still supports this older session information auxiliary block.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1058</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] AUX_PERF_FAILURE_V2: Sent to the server as diagnostic information to report a previously failed call to the messaging server or the directory service.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1401</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.2.2.1</ns1:Doc_Sect>
		<ns1:Description>[In Client Performance Monitoring] [AUX_PERF_FAILURE_V2] The client acquires the values of the RequestID, ProcessID, ClientID, ServerID, and SessionID fields used within this block by previously sending the AUX_PERF_REQUESTID auxiliary block structure, the AUX_PERF_PROCESSINFO auxiliary block structure, the AUX_PERF_CLIENTINFO auxiliary block structure, the AUX_PERF_SERVERINFO, and either the AUX_PERF_SESSIONINFO auxiliary block structure or the AUX_PERF_SESSIONINFO_V2 auxiliary block structure to the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4868</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.3</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoDisconnect Method] A client terminates communication with a server by calling the EcDoDisconnect method, as described in section 3.1.4.3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4869</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.3</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoDisconnect Method] In the call to the EcDoDisconnect method, the client passes the session context handle that was created in a successful call to the interface EcDoConnectEx method, as described in section 3.1.4.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4870</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.3</ns1:Doc_Sect>
		<ns1:Description>[In Sending the EcDoDisconnect Method] It is suggested that the server clean up any Session Context data associated with this session context handle [the handle passed to server by client when calling method EcDoConnectEx].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1192</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.4</ns1:Doc_Sect>
		<ns1:Description>[In Handling Server Too Busy] All methods that require a valid session context handle are to be retried if the call fails with RPC status RPC_S_SERVER_TOO_BUSY (0x000006BB).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1193</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.4</ns1:Doc_Sect>
		<ns1:Description>[In Handling Server Too Busy] The number of times the client retries and the amount of time the client waits before retrying is based on the pcRetry and pcmsRetryDelay parameters returned on the EcDoConnectEx method, as specified in section 3.1.4.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1194</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.4</ns1:Doc_Sect>
		<ns1:Description>[In Handling Server Too Busy] The EcDoConnectEx method is the only method that creates a session context handle, so successful processing of this method [EcDoConnectEx] is a prerequisite for any method that requires a session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4871</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.4</ns1:Doc_Sect>
		<ns1:Description>[In Handling Server Too Busy] For more details about circumstances under which the RPC_S_SERVER_TOO_BUSY status code is returned, see [MS-OXCROPS] section 3.2.4.2.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1195</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.5</ns1:Doc_Sect>
		<ns1:Description>[In Handling Connection Failures] If the client's connection to the server fails, the client cleans up any saved session state information and close the session context handle if it [session context handle] is not already set to zero.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1265</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.5</ns1:Doc_Sect>
		<ns1:Description>[In Handling Connection Failures] If the server prematurely disconnects a client by clearing the session context handle in the response to an EMSMDB interface RPC, the client cleans up any saved session state information and closes the session context handle if it [session context handle] is not already set to zero.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1196</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.5</ns1:Doc_Sect>
		<ns1:Description>[In Handling Connection Failures] The binding handle of the session is to be closed.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1197</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.5</ns1:Doc_Sect>
		<ns1:Description>[In Handling Connection Failures] A client can choose to reconnect to the server automatically by creating a new binding handle and calling the EcDoConnectEx method, as specified in section 3.1.4.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1198</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.5</ns1:Doc_Sect>
		<ns1:Description>[In Handling Connection Failures] This [creating a new binding handle and calling EcDoConnectEx] creates a new Session Context on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1199</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.5</ns1:Doc_Sect>
		<ns1:Description>[In Handling Connection Failures] Note that all Server objects previously opened on the server will no longer exist.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1200</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.5</ns1:Doc_Sect>
		<ns1:Description>[In Handling Connection Failures] Note the client MUST issue ROP commands to re-create or reopen the Server objects.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1724</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.6</ns1:Doc_Sect>
		<ns1:Description>[In Handling Endpoint Consolidation] During the first connection to the server, the client does not know whether the server supports port consolidation.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1725</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.6</ns1:Doc_Sect>
		<ns1:Description>[In Handling Endpoint Consolidation] If the client receives the AUX_ENDPOINT_CAPABILITIES auxiliary block structure, as specified in section 2.2.2.2.19, in the server's response to the EcDoConnectEx method, as specified in section 3.1.4.1, initiated by the client, then the client SHOULD&lt;34&gt; save the information so that on subsequent connections to that server the client can consolidate the RFRI, NSPI, and EMSMDB interfaces to a single port, such as port 6001.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1726</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.6</ns1:Doc_Sect>
		<ns1:Description>[In Handling Endpoint Consolidation] There is no requirement that the client consolidate the interfaces because this behavior [save the AUX_ENDPOINT_CAPABILITIES auxiliary buffer information] is completely optional.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1727</ns1:REQ_ID>
		<ns1:Doc_Sect>3.2.4.6</ns1:Doc_Sect>
		<ns1:Description>[In Handling Endpoint Consolidation] There is a one reconnection lag until the client connects in the most optimal way.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1201</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3</ns1:Doc_Sect>
		<ns1:Description>[In AsyncEMSMDB Server Details] The server responds to messages it [the server] receives from the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1728</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] This section [section 3.3.1] describes a conceptual model of possible data organization that an implementation maintains to participate in this protocol [MS-OXCRPC].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1729</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] The described organization is provided to facilitate the explanation of how the protocol [MS-OXCRPC] behaves.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1730</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] This specification does not mandate that implementations adhere to this model as long as their external behavior is consistent with that described in this specification.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1205</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] The ADM for this interface [AsyncEMSMDB] is the same as that for the EMSMDB interface, as specified in section 3.1.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1288</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] The AsyncEMSMDB uses an asynchronous Global.Handle ADM element, as defined in section 3.1.1.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1289</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] The Global.Handle ADM element maps to the session context that is associated with a session context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1209</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] There is only one asynchronous Global.Handle ADM element for a session context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1210</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] All methods on the AsyncEMSMDB interface that use an asynchronous context handle are performed against the Session Context that is associated with the asynchronous Global.Handle ADM element (or asynchronous context handle).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R1288.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1211</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] The server keeps a mapping between the asynchronous Global.Handle ADM element and an active Session Context on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1212</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] A Session Context can be created and destroyed through the EMSMDB interface.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1268</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] A Session Context can be destroyed through the EMSMDB interface.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1213</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] When the Session Context is destroyed, the asynchronous context handle becomes invalid and will be rejected if used.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1269</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] When the client connection is lost, the asynchronous context handle becomes invalid and will be rejected if used.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1214</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] To initialize the AsyncEMSMDB interface, the server MUST do the following: 1. Register the different protocol sequences that will allow clients to communicate with the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1216</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] The supported protocol sequences are specified in section 2.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1217</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] Note that some protocol sequences use named endpoints, which are also specified in section 2.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1218</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] 2. Register the authentication methods that are allowed on the AsyncEMSMDB interface: RPC_C_AUTHN_WINNT, RPC_C_AUTHN_GSS_KERBEROS and RPC_C_AUTHN_GSS_NEGOTIATE.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1417</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] A client uses one of these authentication methods [RPC_C_AUTHN_WINNT, RPC_C_AUTHN_GSS_KERBEROS and RPC_C_AUTHN_GSS_NEGOTIATE] to authenticate.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1220</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] 3. Start listening for RPCs.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1221</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] 4. Register the AsyncEMSMDB interface.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1416</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] 5. Register the AsyncEMSMDB interface to all the registered binding handles created previously.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1225</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] This protocol [MS-OXCRPC] MUST indicate to the RPC runtime that it [MS-OXCRPC] is to perform a strict NDR data consistency check at target level 5.0, as specified in [MS-RPCE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1276</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] This interface [AsyncEMSMDB] includes the following method &lt;35&gt;: [EcDoAsyncWaitEx].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirement: MS-OXCRPC_R1922.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1227</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method EcDoAsyncWaitEx: An asynchronous call that the server will not complete until there are pending events on the Session Context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R1229.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1228</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Method EcDoAsyncWaitEx: The method requires an active asynchronous context handle returned from the EcDoAsyncConnectEx method on the EMSMDB interface.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1226</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] The opnum of method "EcDoAsyncWaitEx" is 0.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1229</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] The EcDoAsyncWaitEx method is an asynchronous call that the server does not complete until events are pending on the Session Context, up to a 5-minute duration of no client activity.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1230</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] If no events are available within 5 minutes of the time that the client last accessed the server&lt;36&gt; through a call to the EcDoRpcExt2 method, as specified in section 3.1.4.2, the server returns the call and does not set the NotificationPending flag in the pulFlagsOut parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by derived requirements: MS-OXCRPC_R1907, MS-OXCRPC_R1930.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1231</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] If an event is pending, the server completes the call immediately and returns the NotificationPending flag in the pulFlagsOut parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1232</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] This call [EcDoAsyncWaitEx] requires an active asynchronous context handle to be returned from the EcDoAsyncConnectEx method on the EMSMDB interface, as specified in section 3.1.4.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1233</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] The asynchronous context handle is associated with the Session Context.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R1232.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1234</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] This method [EcDoAsyncWaitEx] is part of notification handling.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1731</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] For more information about notifications, see [MS-OXCNOTIF].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4872</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] acxh: An asynchronous context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1235</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] acxh: On input, the client MUST pass a valid asynchronous context handle that was created by calling the EcDoAsyncConnectEx method on the EMSMDB interface.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1236</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] [acxh] The server uses the asynchronous context handle to identify the Session Context to use for this call [method EcDoAsyncWaitEx].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1888</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] If the asynchronous context handle is not valid, the server successfully completes the call, setting the NotificationPending flag in the pulFlagsOut parameter.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1271</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] ulFlagsIn: Unused.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1270</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] [ulFlagsIn] Reserved for future use.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1238</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] [ulFlagsIn] Client MUST pass a value of 0x00000000.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1239</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] pulFlagsOut: The output flags [NotificationPending (0x00000001)] for the client.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4873</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] [pulFlagsOut] Flag values [0x00000001] are specified in the following table.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1240</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] pulFlagsOut: The value of flag "NotificationPending" is "0x00000001".</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1241</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] pulFlagsOut: Flag NotificationPending: Signals that events are pending for the client on the Session Context on the server.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R1243.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1418</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] [pulFlagsOut] [Flag NotificationPending] The client MUST call the EcDoRpcExt2 method (with additional data in the ROP request buffer if there is additional data to send to the server, or with an empty ROP request buffer if there is no additional data to send to the server).</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1243</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] [pulFlagsOut] [Flag NotificationPending] The server will return the event details in the ROP response buffer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1338</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] Return Values: If the method succeeds, the return value is 0.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1419</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] [Return Values] If the method fails, the return value is an implementation-specific error code.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1339</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] [Return Values] [If the method fails, the return value is an implementation-specific error code or] one of the protocol-defined error codes [0x000007EE, 0x000003ED] listed in the following table [the table in section 3.3.4.1].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1343</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] [Return Values] [Rejected (0x000007EE)] An EcDoAsyncWaitEx method call is already outstanding on this asynchronous context handle.&lt;37&gt;</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1345</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] [Return Values] [Exiting (0x000003ED)] The server is shutting down.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1346</ns1:REQ_ID>
		<ns1:Doc_Sect>3.3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In EcDoAsyncWaitEx Method (opnum 0)] Exceptions Thrown: No exceptions are thrown beyond those thrown by the underlying RPC protocol as specified in [MS-RPCE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1732</ns1:REQ_ID>
		<ns1:Doc_Sect>3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] This section [section 3.4.1] describes a conceptual model of possible data organization that an implementation maintains to participate in this protocol [MS-OXCRPC].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1733</ns1:REQ_ID>
		<ns1:Doc_Sect>3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] The described organization is provided to facilitate the explanation of how the protocol [MS-OXCRPC] behaves.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1734</ns1:REQ_ID>
		<ns1:Doc_Sect>3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] This specification does not mandate that implementations adhere to this model as long as their external behavior is consistent with that described in this specification.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1244</ns1:REQ_ID>
		<ns1:Doc_Sect>3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] For some functionality on the AsyncEMSMDB interface, it is required that the client store an asynchronous context handle, as described in section 3.3.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1245</ns1:REQ_ID>
		<ns1:Doc_Sect>3.4.1</ns1:Doc_Sect>
		<ns1:Description>[In Abstract Data Model] [For some functionality on the AsyncEMSMDB interface, it is required that the client store an Asynchronous Context Handle (ACXH)] and use it [an Asynchronous Context Handle (ACXH)] on subsequent interface calls that require an asynchronous context handle.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1247</ns1:REQ_ID>
		<ns1:Doc_Sect>3.4.3</ns1:Doc_Sect>
		<ns1:Description>[In Initialization] This interface [AsyncEMSMDB] can only be used after first obtaining an asynchronous context handle from the EcDoAsyncConnectEx method from the EMSMDB interface, as specified in section 3.1.4.1.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1248</ns1:REQ_ID>
		<ns1:Doc_Sect>3.4.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] This protocol [MS-OXCRPC] MUST indicate to the RPC runtime that it [MS-OXCRPC] is to perform a strict NDR data consistency check at target level 5.0, as specified in [MS-RPCE].</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1420</ns1:REQ_ID>
		<ns1:Doc_Sect>3.4.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] A client SHOULD&lt;38&gt; use different RPC methods based on the product version being run on the server that it is accessing.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1249</ns1:REQ_ID>
		<ns1:Doc_Sect>3.4.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Upon the completion of the RPC method, the client returns the result unmodified to the higher layer.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1250</ns1:REQ_ID>
		<ns1:Doc_Sect>3.4.4</ns1:Doc_Sect>
		<ns1:Description>[In Message Processing Events and Sequencing Rules] Some method calls require an RPC context handle, which is created in another method call. For details about method dependencies, see section 3.</ns1:Description>
		<ns1:Behavior>Protocol</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1001</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Unless otherwise specified, any statement of optional behavior in this specification that is prescribed using the terms SHOULD or SHOULD NOT implies product behavior in accordance with the SHOULD or SHOULD NOT prescription.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1002</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Unless otherwise specified, the term MAY implies that the product does not follow the prescription.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Both</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1889</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does support this given protocol sequence [ncacn_ip_tcp]. ( Microsoft Exchange Server 2007 and 2010 follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R2:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1911</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does not support this given protocol sequence [ncacn_ip_tcp]. ( Microsoft Exchange Server 2013 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R2:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1936</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does support this given protocol sequence [ncacn_http]. &lt;1&gt; Section 2.1: Exchange 2007 and above follow this behavior.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R2:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1739</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does not support the AUX_ENDPOINT_CAPABILITIES auxiliary buffer. (&lt;2&gt; Section 2.2.2.2: Exchange 2007 and Exchange 2010 do not return the AUX_ENDPOINT_CAPABILITIES auxiliary buffer.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1518:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1839</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does support the AUX_ENDPOINT_CAPABILITIES auxiliary buffer. (Microsoft Exchange Server 2013 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1518:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1741</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;2&gt; Section 2.2.2.2] the initial release version of Office Outlook 2007, Microsoft Office Outlook 2007 Service Pack 1, Microsoft Office Outlook 2007 Service Pack 2 (SP2), and the initial release version of mICROSOFT Outlook 2010 ignore the AUX_ENDPOINT_CAPABILITIES auxiliary block structure.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1742</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;2&gt; Section 2.2.2.2] Microsoft Office Outlook 2010 Service Pack 1 (SP1), Outlook 2013, and Outlook 2016 support the AUX_ENDPOINT_CAPABILITIES auxiliary block structure.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1893</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;3&gt; Section 2.2.2.17: Exchange 2013 and above always set the USE_AUTODISCOVER_FOR_PUBLIC_FOLDER_CONFIGURATION flag.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1894</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Office Outlook 2007, and Outlook 2010 ignore this flag [USE_AUTODISCOVER_FOR_PUBLIC_FOLDER_CONFIGURATION].</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1895</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Outlook 2013 and above use this flag [USE_AUTODISCOVER_FOR_PUBLIC_FOLDER_CONFIGURATION].</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1744</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior]  Implementation does not support combined RFRI, NSPI, and EMSMDB interfaces on the same connection. [In Appendix B: Product Behavior] [&lt;4&gt; Section 2.2.2.19] Exchange 2007 and Exchange 2010 do not support combined RFRI, NSPI, and EMSMDB interfaces on the same connection.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1523:i,MS-OXCRPC_R1002:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1921</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does process requests for different interfaces independently even when requests are transmitted on the same connection. (Microsoft Exchange Server 2013 and above follow this behavior).</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1523:i,MS-OXCRPC_R1002:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1550</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does support the RPC_C_AUTHN_NONE authentication method. (Microsoft Exchange Server 2013 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1547:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1551</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;5&gt; Section 3.1.3] Outlook 2013 and above support the RPC_C_AUTHN_NONE authentication method.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1748</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;5&gt; Section 3.1.3] Office Outlook 2007, Outlook 2010, Outlook 2013 and Outlook 2016 support the RPC_C_AUTHN_WINNT, RPC_C_AUTHN_GSS_KERBEROS, and RPC_C_AUTHN_GSS_NEGOTIATE authentication methods.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1749</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does support RPC_C_AUTHN_WINNT authentication method. (Microsoft Exchange Server 2007 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1547:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1750</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does support RPC_C_AUTHN_GSS_KERBEROS authentication methods. (Microsoft Exchange Server 2007 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1547:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1751</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does support RPC_C_AUTHN_GSS_NEGOTIATE authentication method. (Microsoft Exchange Server 2007 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1547:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1753</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does not support the RPC_C_AUTHN_NONE authentication method. (Microsoft Exchange Server 2007 and Microsoft Exchange Server Exchange 2010 follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1547:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1553</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;5&gt; Section 3.1.3] Office Outlook 2007, and Outlook 2010 do not support the RPC_C_AUTHN_NONE authentication method.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1915</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does use "exchangeMDB/&lt;Mailbox server FQDN&gt;" as the service principal name (SPN) for the Kerberos authentication method. (Exchange 2007 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1547:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1896</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;6&gt; Section 3.1.3: Office Outlook 2007, Outlook 2010, and Outlook 2013 use "exchangeMDB/&lt;Mailbox server FQDN&gt;" as the service principal name (SPN) for the Kerberos authentication method.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1845</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does support method EcRRegisterPushNotification. &lt;7&gt; Section 3.1.4: Exchange 2007 supports method EcRRegisterPushNotification.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R353:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1937</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implemetation does not support method EcRRegisterPushNotification. (Microsoft Exchange Server 2010 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R353:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R506</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does not support Session Context linking. &lt;8&gt; Section 3.1.4.1: Exchange 2010, Exchange 2013, Exchange 2016 and Exchange 2019 Preview do not support Session Context linking.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R505:i,MS-OXCRPC_R1002:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1850</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation link the Session Context created by this call with the one found, If a session is found. (Microsoft Exchange Server 2007 follows this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R505:i,MS-OXCRPC_R1002:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R507</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does return the same value in the pulTimeStamp that was passed in. [In Appendix B: Product Behavior] [&lt;8&gt; Section 3.1.4.1] [in Exchange 2010, Exchange 2013, Exchange 2016 and Exchange 2019 Preview] If ulIcxrLink is not 0xFFFFFFFF, the server will not attempt to search for a session with the same Session Context and link to them.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R505:i,MS-OXCRPC_R1002:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R508</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does return the same value in the pulTimeStamp that was passed in. [In Appendix B: Product Behavior] [&lt;8&gt; Section 3.1.4.1] [In Exchange 2010, Exchange 2013 Exchange 2016 and Exchcange 2019 Preview, if ulIcxrLink is not 0xFFFFFFFF, then the server will not attempt to search for a session with the same Session Context and link to them,] it [method EcDoConnectEx] will then return the same value in the pulTimeStamp that was passed in.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R505:i,MS-OXCRPC_R1002:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1430</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;9&gt; Section 3.1.4.1: In the initial release version of Exchange 2007, the server counts individual connections for Client Access License accounting, so Session Context linking is useful in method call EcDoConnectEx on the EMSMDB interface.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1431</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does not support Session Context linking. &lt;10&gt; Section 3.1.4.1: Exchange 2010, Exchange 2013 Exchange 2016 and Exchange 2019 Preview do not support Session Context linking.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R534:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1943</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does not assign two active Session Contexts the same session index value. (Microsoft Exchange Server 2007 follows this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R534:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1432</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does not support Session Context linking. &lt;11&gt; Section 3.1.4.1: Exchange 2010, Exchange 2013, and  Exchange 2016 do not support Session Context linking.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1517:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1944</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] If no such Session Context state is found, the implementation does not fail the EcDoConnectEx call, but simply does not do linking.  (Microsoft Exchange Server 2007 follows this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1517:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1435</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does return the same value in the pulTimeStamp that was passed in. [In Appendix B: Product Behavior] [&lt;11&gt; Section 3.1.4.1] Rather [in Exchange 2010, Exchange 2013, and Exchange 2016, if ulIcxrLink is not 0xFFFFFFFF, then the server will not attempt to search for a session with the same Session Context and link to the server], it [the server] will then return the same value in the pulTimeStamp that was passed in.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1517:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1434</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does return the same value in the pulTimeStamp that was passed in. [In Appendix B: Product Behavior] [&lt;11&gt; Section 3.1.4.1] [in Exchange 2010, Exchange 2013, and Exchange 2016] If ulIcxrLink is not 0xFFFFFFFF, the server will not attempt to search for a session with the same Session Context and link to it.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1517:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4874</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does fail with return code 0x80040110 when the value of the cbAuxIn parameter on input is larger than 0x00001008. (&lt;12&gt; Section 3.1.4.1: Exchange 2007 follows this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R571:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4875</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does fail with the RPC status code RPC_X_BAD_STUB_DATA (0x000006F7) if the value of cbAuxIn is larger than 0x00001008 bytes in size. (Exchange 2010 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R571:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R573</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation will fail with ecInvalidParam (0x80070057) if cbAuxIn is greater than 0x00000000 and less than 0x00000008. &lt;13&gt; Section 3.1.4.1: The initial release version of Exchange 2010 will fail with ecInvalidParam (0x80070057) if cbAuxIn is greater than 0x00000000 and less than 0x00000008.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1436</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does not fail if cbAuxIn is greater than 0x00000000 and less than 0x00000008. &lt;14&gt; Section 3.1.4.1: Exchange 2007 does not fail if cbAuxIn is greater than 0x00000000 and less than 0x00000008.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1367:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1940</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does fail with ecRpcFailed (0x80040115) if this value is greater than 0x00000000 and less than 0x00000008. (Microsoft Exchange Server 2010 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1367:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4887</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does return ecAccessDenied (0x80070005) if the szUserDN parameter is empty. (&lt;15&gt; Section 3.1.4.1: Exchange 2010 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1369:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1898</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;15&gt; Section 3.1.4.1: Exchange 2007 returns ecRpcAuthentication (0x000004B6) if the authentication context associated with the binding handle does not have enough privilege and if the szUserDn parameter is not empty.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1437</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;15&gt; Section 3.1.4.1] Implementation returns ecNone (0x00000000) if the szUserDN parameter is empty. (Microsoft Exchange Server 2007 follows this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1369:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1438</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation doesn't support sending the AUX_OSVERSIONINFO block. &lt;16&gt; Section 3.1.4.1.2.1: Exchange 2010, Exchange 2013, Exchange 2016 and Exchange 2019 Preview do not support sending the AUX_OSVERSIONINFO block.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1066:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1918</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does return the data of the servers operating system version and operating system service pack information in AUX_OSVERSIONINFO. (Microsoft Exchange Server 2007 follows this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1066:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1692</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does return the AUX_EXORGINFO block in the rgbAuxOut buffer on the EcDoConnectEx call. (Microsoft Exchange Server 2007 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1691:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1755</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;17&gt; Section 3.1.4.1.2.1: Exchange 2003 follows this behavior does not support the AUX_SERVER_SESSION_INFO auxiliary buffer.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1756</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;17&gt; Section 3.1.4.1.2.1] Office Outlook 2003 does not support the AUX_SERVER_SESSION_INFO auxiliary buffer.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1899</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does return the same value on output as was input, not 0x00000000. (&lt;18&gt; Section 3.1.4.2: Exchange 2010 returns the same value on output as was input, not 0x00000000.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R644:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1934</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] On output, implementation does set field pulFlags to 0x00000000. (Microsoft Exchange Server 2007, Microsoft Exchange Server 2013 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R644:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1374</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does fail with error code ecRpcFormat if the request buffer is larger than 0x00008007 bytes in size. &lt;19&gt; Section 3.1.4.2: Exchange 2007 and 2010 will fail with error code ecRpcFormat (0x000004B6) if the request buffer is larger than 0x00008007 bytes in size.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1373:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R2001</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does fail with error code ecRpcFailed (0x80040115) if the request buffer is larger than 0x00008007 bytes in size. (Microsoft Exchange Server 2010 Service Pack 2 (SP2), Microsoft Exchange Server 2013 Service Pack 1 (SP1), and Exchange 2016 will fail with error code ecRpcFailed (0x80040115) if the request buffer is larger than 0x00008007 bytes in size.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1373:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1939</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does fail with the RPC status code of RPC_X_BAD_STUB_DATA (0x000006F7) if the request buffer is larger than 0x00040000 bytes in size. (Microsoft Exchange Server 2010 Service Pack 2 (SP2) and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1373:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1900</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does fail with error code ecRpcFormat (0x000004B6) if the value in pcbOut is less than 0x00000008. (&lt;20&gt; Section 3.1.4.2: Exchange 2007, and Microsoft Exchange Server 2010 Service Pack 1 (SP1) fail with error code ecRpcFormat (0x000004B6) if the value in the cbIn parameter is less than 0x00000008. )</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1379:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1508</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does fail with error code ecRpcFailed (0x80040115) if the request buffer is smaller than the size of RPC_HEADER_EXT (0x00000008 bytes). (Microsoft Exchange Server 2010 SP2 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1379:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1377</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;20&gt; Section 3.1.4.2: Implementation doesn't allow a cbIn value smaller than 0x00000008. (The initial release version of Exchange 2010 follows this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1379:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R664</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does fail with error code ecRpcFailed (0x80040115) if the value in pcbOut on input is less than 0x00000008. (Microsoft Exchange Server 2010 follows this behavior).</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R663:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1924</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does fail with ecRpcFormat (0x000004B6) if the output buffer is less than 0x00008007. (Microsoft Exchange Server 2007 follows this behavior).</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R663:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R2002</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does succeed if output buffer is less than 0x00000008, but no request ROPs will have been processed. (Microsoft Exchange Server 2013 and Microsoft Exchange Server 2016 follow this behavior).</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R663:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4876</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does fail with return code 0x80040110 if the request buffer value of the cbAuxIn parameter is larger than 0x00001008 bytes in size. (&lt;22&gt; Section 3.1.4.2: Exchange 2007 follows this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R678:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4877</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does fail with return code 0x000006F7 if the request buffer value of the cbAuxIn parameter is larger than 0x00001008 bytes in size. (&lt;22&gt; Section 3.1.4.2: Exchange 2010 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R678:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1381</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does fail with ecRpcFailed (0x80040115) if the cbAuxIn parameter is greater than 0x00000000 and less than 0x00000008. (&lt;23&gt; Section 3.1.4.2: Exchange 2010 follows this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R678:i,MS-OXCRPC_R1001:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1926</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does not return auxiliary payload data to the client. (Microsoft Exchange Server 2010 follows this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R681:i,MS-OXCRPC_R1002:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1403</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does return auxiliary payload data to the client. &lt;24&gt; Section 3.1.4.2.2.1: Exchange 2007, Exchange 2013, and Exchange 2016 support returning data in rgbAuxOut parameter.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R681:i,MS-OXCRPC_R1002:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Adapter</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1812</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does return the ecRejected error code, when the Server has asynchronous RPC notifications disabled. (Microsoft Exchange Server 2007 follows this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R717:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1757</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does not return the ecRejected error code, when the Server has asynchronous RPC notifications disabled. (&lt;25&gt; Section 3.1.4.4: Exchange 2010, Exchange 2013, and Exchange 2016 do not return the ecRejected error code.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R717:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1941</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does not return [ecRejected (0x000007EE)] when Client either polls for notifications or calls EcRRegisterPushNotifications. [In Appendix B: Product Behavior]  &lt;25&gt; Section 3.1.4.4: Exchange 2010, Exchange 2013, and Exchange 2016 do not return the ecRejected error code.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R718:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1942</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does return ecRejected (0x000007EE) when client either polls for notifications or calls EcRRegisterPushNotifications. (Microsoft Exchange Server 2007 follows this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R718:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4880</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does support the EcRRegisterPushNotification method. (&lt;26&gt; Section 3.1.4.5: Exchange 2007 does support this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1555:i,MS-OXCRPC_R1002:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Non-testable</ns1:Verification>
		<ns1:VerificationComment>Verified by requirement: MS-OXCRPC_R1845.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4881</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;26&gt; Section 3.1.4.5: The initial release version of Exchange 2010 and Exchange 2010 SP1 do not support the EcRRegisterPushNotification method and return ecNotSupported.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1555:i,MS-OXCRPC_R1002:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1557</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does support the EcRRegisterPushNotification method call. &lt;26&gt; Section 3.1.4.5: Exchange 2010 SP2 supports the EcRRegisterPushNotification RPC when a registry key is created to support push notifications, as described in [MSFT-ConfigStaticUDPPort].</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1555:i,MS-OXCRPC_R1002:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1558</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does not support the EcRRegisterPushNotification method call. &lt;26&gt; Section 3.1.4.5: Exchange 2013 Exchange 2016 and Exchange 2019 do not support the EcRRegisterPushNotification RPC and returns ecNotSupported.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1555:i,MS-OXCRPC_R1002:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1787</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;27&gt; Section 3.2.4: Office Outlook 2003 and above use EMSMDB interface method EcDoDisconnect when accessing a computer that is running Exchange 2003.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1788</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003, 2007 and 2010 use EMSMDB interface method EcRRegisterPushNotification when accessing a computer that is running Exchange 2003.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1794</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003, 2007 and 2010 use EMSMDB interface method EcRRegisterPushNotification when accessing a computer that is running Exchange 2007.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1789</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above don't use EMSMDB interface method EcDummyRpc when accessing a computer that is running Exchange 2003.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1790</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above use EMSMDB interface method EcDoConnectEx when accessing a computer that is running Exchange 2003.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1791</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above use EMSMDB interface method EcDoRpcExt2 when accessing a computer that is running Exchange 2003.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1792</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above don't use EMSMDB interface method EcDoAsyncConnectEx when accessing a computer that is running Exchange 2003.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1793</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above use EMSMDB interface method EcDoDisconnect when accessing a computer that is running Exchange 2007.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1795</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above don't use EMSMDB interface method EcDummyRpc when accessing a computer that is running Exchange 2007.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1797</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above use EMSMDB interface method EcDoRpcExt2 when accessing a computer that is running Exchange 2007.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1798</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2007 and above use EMSMDB interface method EcDoAsyncConnectEx when accessing a computer that is running Exchange 2007.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1799</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above use EMSMDB interface method EcDoDisconnect when accessing a computer that is running Exchange 2010.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1800</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above don't use EMSMDB interface method EcRRegisterPushNotification when accessing a computer that is running Exchange 2010.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1801</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above don't use EMSMDB interface method EcDummyRpc when accessing a computer that is running Exchange 2010.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1796</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above use EMSMDB interface method EcDoConnectEx when accessing a computer that is running Exchange 2007.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1802</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above follow this behavior uses EMSMDB interface method EcDoConnectEx when accessing a computer that is running Exchange 2010.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1803</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above use EMSMDB interface method EcDoRpcExt2 when accessing a computer that is running Exchange 2010.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1804</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2007 and above use EMSMDB interface method EcDoAsyncConnectEx when accessing a computer that is running Exchange 2010.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1901</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above use EMSMDB interface method EcDoDisconnect when accessing a computer that is running Exchange 2013.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1902</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above don't use EMSMDB interface method EcRRegisterPushNotification when accessing a computer that is running Exchange 2013.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1903</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above don't use EMSMDB interface method EcDummyRpc when accessing a computer that is running Exchange 2013.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1904</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above use EMSMDB interface method EcDoConnectEx when accessing a computer that is running Exchange 2013.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1905</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2003 and above use EMSMDB interface method EcDoRpcExt2 when accessing a computer that is running Exchange 2013.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1906</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;27&gt; Section 3.2.4] Office Outlook 2007 and above use EMSMDB interface method EcDoAsyncConnectEx when accessing a computer that is running Exchange 2013.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1412</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;28&gt; Section 3.2.4.1: Exchange 2010, Exchange 2013, and Exchange 2016 do not support Session Context linking.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1413</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;29&gt; Section 3.2.4.1: In Exchange 2003 and the initial release version of Exchange 2007, the server counts individual connections for Client Access License accounting, so Session Context linking is useful in method call EcDoConnectEx on the EMSMDB interface.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1414</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;30&gt; Section 3.2.4.1: Exchange 2010, Exchange 2013, and Exchange 2016 do not support Session Context linking.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1415</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;31&gt; Section 3.2.4.1: Exchange 2010, Exchange 2013, and Exchange 2016 do not support Session Context linking.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1003</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;32&gt; Section 3.2.4.1.2.1: Outlook 2010 by default does not populate the MachineName, UserName, ClientIP, and MacAddress fields within the AUX_PERF_CLIENTINFO structure.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1761</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;33&gt; Section 3.2.4.1.2.1: Exchange 2003 does not support the AUX_CLIENT_CONNECTION_INFO auxiliary buffer.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1762</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;33&gt; Section 3.2.4.1.2.1] Office Outlook 2003 does not support the AUX_CLIENT_CONNECTION_INFO auxiliary buffer.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1763</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;34&gt; Section 3.2.4.6:  Office Outlook 2003, the initial release version of Office Outlook 2007, Office Outlook 2007 SP1, Office Outlook 2007 SP2, and Outlook 2010 do not support port consolidation.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1764</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;34&gt; Section 3.2.4.6] Microsoft Office Outlook 2007 Service Pack 3 (SP3) supports port consolidation.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1765</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;34&gt; Section 3.2.4.6] Clients that do not support port consolidation ignore the AUX_ENDPOINT_CAPABILITIES auxiliary block structure, as described in section 2.2.2.2.19.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R4882</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;34&gt; Section 3.2.4.6: Office Outlook 2007 SP3, Outlook 2013, and Outlook 2016 support port consolidation.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1922</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] &lt;35&gt; Section 3.3.4: Implementation does support AsyncEMSMDB method EcDoAsyncWaitEx. (Microsoft Exchange Server 2007 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1276:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1930</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does return the call and will not set the NotificationPending flag in the pulFlagsOut field, If no events are available within five minutes of the time that the client last accessed the server through a call to EcDoRpcExt2. (Microsoft Exchange Server 2010 and above follow this behavior.)</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1230:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1907</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does complete the call every 5 minutes regardless of the client's last activity time. [In Appendix B: Product Behavior] &lt;36&gt; Section 3.3.4.1: Exchange 2007 completes the call every 5 minutes regardless of the client's last activity time.</ns1:Description>
		<ns1:Derived>MS-OXCRPC_R1230:i</ns1:Derived>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1908</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] Implementation does reject the request if the asynchronous context handle is invalid. (&lt;37&gt; Section 3.3.4.1: Exchange 2007 and Exchange 2010 follow this behavior.)</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Server</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Test Case</ns1:Verification>
		<ns1:VerificationComment>This requirement can be enabled/disabled in the deployment.ptfconfig file.</ns1:VerificationComment>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1807</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;38&gt; Section 3.4.4] The AsyncEMSMDB interface methods are not used by a client when accessing a computer that is running Exchange 2003.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Normative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
	<ns1:Requirement>
		<ns1:REQ_ID>MS-OXCRPC_R1910</ns1:REQ_ID>
		<ns1:Doc_Sect>7</ns1:Doc_Sect>
		<ns1:Description>[In Appendix B: Product Behavior] [&lt;38&gt; Section 3.4.4] The AsyncEMSMDB interface method EcDoAsyncWaitEx is used by Office Outlook 2007, Outlook 2010, Outlook 2013 and Outlook 2016 when accessing a computer that is running Exchange 2007, Exchange 2010, Exchange 2013, Exchange 2016 or Exchange 2019.</ns1:Description>
		<ns1:Behavior>Product</ns1:Behavior>
		<ns1:Scope>Client</ns1:Scope>
		<ns1:IsNormative>Informative</ns1:IsNormative>
		<ns1:Verification>Unverified</ns1:Verification>
	</ns1:Requirement>
</ns1:ReqTable>